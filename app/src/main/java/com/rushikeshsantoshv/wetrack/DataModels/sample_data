package com.rushikeshsantoshv.wetrack.Activities;

import android.annotation.SuppressLint;
import android.app.Dialog;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.widget.LinearLayout;

import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;
import com.google.android.material.snackbar.Snackbar;
import com.google.firebase.Timestamp;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.Query;
import com.rushikeshsantoshv.wetrack.Adapters.EmpAttendancePerformAdapter;
import com.rushikeshsantoshv.wetrack.DataModels.EmpAttendanceRateModel;
import com.rushikeshsantoshv.wetrack.DataModels.Functions;
import com.rushikeshsantoshv.wetrack.R;

import org.jetbrains.annotations.NotNull;
import org.json.JSONException;
import org.json.JSONObject;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EmployeeAnalysisActivity extends AppCompatActivity {

    LinearLayout emp_analysis_intask_addemp_btn, emp_analysis_intask_takeattend_btn, emp_analysis_empattend_rate_lay, emp_analysis_empperformance_rate_lay;
    RecyclerView emp_analysis_empattend_rate_rec, emp_analysis_empperformance_rate_rec;
    LinearLayout emp_analysis_mainlay;

    String comp_path;
    FirebaseAuth firebaseAuth;
    FirebaseUser firebaseUser;
    FirebaseFirestore db;
    Functions functions = new Functions();
    EmpAttendancePerformAdapter empAttendancePerformAdapter;
    ArrayList<EmpAttendanceRateModel> emplist_arr = new ArrayList<>();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_employee_analysis);

        new Functions().coloredStatusBarDarkTextDesign(this, R.color.maincolor_light, R.color.white);

        employeeAnalysisInits();

        loadEmployeesList();
    }

    private void employeeAnalysisInits() {
        emp_analysis_mainlay = findViewById(R.id.emp_analysis_mainlay);
        emp_analysis_intask_addemp_btn = findViewById(R.id.emp_analysis_intask_addemp_btn);
        emp_analysis_intask_takeattend_btn = findViewById(R.id.emp_analysis_intask_takeattend_btn);
        emp_analysis_empattend_rate_rec = findViewById(R.id.emp_analysis_empattend_rate_rec);
        emp_analysis_empperformance_rate_rec = findViewById(R.id.emp_analysis_empperformance_rate_rec);
        emp_analysis_empattend_rate_lay = findViewById(R.id.emp_analysis_empattend_rate_lay);
        emp_analysis_empperformance_rate_lay = findViewById(R.id.emp_analysis_empperformance_rate_lay);
        firebaseAuth = FirebaseAuth.getInstance();
        firebaseUser = firebaseAuth.getCurrentUser();
        db = FirebaseFirestore.getInstance();
        comp_path = new Functions().getSharedPrefsValue(getApplicationContext(), "user_data", "company_path", "string", null);
    }

    @SuppressLint("NotifyDataSetChanged")
    private synchronized void loadEmployeesList() {

        Dialog loading_dialog = functions.createDialogBox(this, R.layout.loading_dialog, false);
        loading_dialog.show();

        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.DAY_OF_MONTH,1);
        cal.set(Calendar.YEAR, Integer.parseInt(functions.getTodayDate("yyyy")));
        cal.set(Calendar.MONTH, Integer.parseInt(functions.getTodayDate("MM")));

        Timestamp startOfMonth = new Timestamp(cal.getTime());
        cal.add(Calendar.MONTH, 1);
        Timestamp startOfNextMonth = new Timestamp(cal.getTime());

        db.collection("Employees")
                .whereEqualTo("company_path", db.document(comp_path))
                .get()
                .addOnCompleteListener(task -> {
                    if (task.isSuccessful()) {
                        if (task.getResult().getDocuments().size() > 0) {
                            List<DocumentSnapshot> emp_list = task.getResult().getDocuments();
                            int i=0;
                            for (DocumentSnapshot doc : emp_list) {
                                DocumentReference emp_reference= doc.getReference();
                                db.collection("Attendances")
                                        .whereEqualTo("attend_emp_reference", emp_reference)
                                        .orderBy("attend_date", Query.Direction.DESCENDING)
                                        .get()
                                        .addOnCompleteListener(task1 -> {
                                            if(task1.isSuccessful()){
                                                if(task1.getResult().getDocuments().size() > 0){
                                                    long present_count = 0, half_day_count = 0, absent_count = 0;
                                                    List<DocumentSnapshot> attendance_arr= task1.getResult().getDocuments();
                                                    for (DocumentSnapshot attendance : attendance_arr) {
                                                        Timestamp att_timestamp= attendance.getTimestamp("attend_date");
                                                        if(functions.getStringFromDate(att_timestamp.toDate(),"MM/yyyy")
                                                                .equals(functions.getTodayDate("MM/yyyy"))){
                                                            present_count += (attendance.getLong("attend_status") == 1) ? 1 : 0;
                                                            half_day_count += (attendance.getLong("attend_status") == 2) ? 1 : 0;
                                                            absent_count += (attendance.getLong("attend_status") == 3) ? 1 : 0;
                                                            functions.putSharedPrefsValue(getApplicationContext(),"emp_attendance_analysis",
                                                                    "present_count","long", present_count);
                                                            functions.putSharedPrefsValue(getApplicationContext(),"emp_attendance_analysis",
                                                                    "half_day_count","long",half_day_count);
                                                            functions.putSharedPrefsValue(getApplicationContext(),"emp_attendance_analysis",
                                                                    "absent_count","long",absent_count);
                                                        }
                                                        else break;
                                                    }
                                                    RequestQueue queue = Volley.newRequestQueue(this);
                                                    String url = "https://wetrackpredictions.pythonanywhere.com/AttendanceAnalysis";

                                                    long val1 = present_count;
                                                    long val2 = half_day_count;
                                                    long val3 = absent_count;

                                                    JsonObjectRequest request = new JsonObjectRequest(Request.Method.POST, url, null,
                                                            response -> {
                                                                try {
                                                                    loading_dialog.dismiss();
                                                                    String prediction_res = response.getString("attendance_analysis_res");
                                                                    String prediction_status = response.getString("attendance_analysis_status");
                                                                    Log.e("attendance_analysis_res", "The result is : " + prediction_res + " and the result status is : " + prediction_status);

                                                                    float result= Float.parseFloat(prediction_res);
                                                                    DecimalFormat df = new DecimalFormat("#.##");
                                                                    result = Float.parseFloat(df.format(result));
                                                                    functions.putSharedPrefsValue(getApplicationContext(),"emp_attendance_analysis",
                                                                            "rating_result","float", result);
                                                                } catch (JSONException e) {
                                                                    loading_dialog.dismiss();
                                                                    Log.e("volley_error", "Some Error Occurred while parsing json data !! Error : " + e.getLocalizedMessage());
                                                                }
                                                            },
                                                            error -> {
                                                                loading_dialog.dismiss();
                                                                Log.e("volley_error", "Some Error Occurred while retrieving json data !! Error : " + error.getLocalizedMessage());
                                                            }) {
                                                        @Override
                                                        public byte[] getBody() {
                                                            HashMap<String, Object> params = new HashMap<>();
                                                            params.put("val1", val1);
                                                            params.put("val2", val2);
                                                            params.put("val3", val3);
                                                            String requestBody = new JSONObject(params).toString();
                                                            return requestBody.getBytes();
                                                        }

                                                        @Override
                                                        public @NotNull
                                                        Map<String, String> getHeaders() {
                                                            HashMap<String, String> headers = new HashMap<>();
                                                            headers.put("User-Agent", "Mozilla/5.0");
                                                            return headers;
                                                        }

                                                        @Override
                                                        public String getBodyContentType() {
                                                            return "application/json";
                                                        }
                                                    };
                                                    queue.add(request);
                                                }
                                                else{
                                                    Snackbar.make(emp_analysis_mainlay,"No attendances taken yet !! Please take the attendances and check for analysis", Snackbar.LENGTH_SHORT).show();
                                                }
                                            }
                                            else{
                                                String msg= task1.getException()!=null && task1.getException().getLocalizedMessage()!=null ?
                                                        task1.getException().getLocalizedMessage() : "No Error";
                                                Log.e("firebase_error", "The error 02 is : "+msg);
                                            }
                                        });

                                new Handler().postDelayed(() -> {
                                    long present_count= (long) functions.getSharedPrefsValue(getApplicationContext(),"emp_attendance_analysis",
                                            "present_count","long",(long) 0);
                                    long half_day_count= (long) functions.getSharedPrefsValue(getApplicationContext(),"emp_attendance_analysis",
                                            "half_day_count","long",(long) 0);
                                    long absent_count= (long) functions.getSharedPrefsValue(getApplicationContext(),"emp_attendance_analysis",
                                            "absent_count","long",(long) 0);
                                    float result= (float) functions.getSharedPrefsValue(getApplicationContext(),"emp_attendance_analysis",
                                            "rating_result","float",  0f);
                                    emplist_arr.add(new EmpAttendanceRateModel(doc.getString("emp_name"),
                                            doc.getString("emp_contact"), result, present_count, half_day_count, absent_count));
                                    Log.e("data","present : "+present_count+" & absent : "+absent_count+" & half day : "
                                            +half_day_count+" & result : "+result);
                                },2000);
                                i++;
                            }
                            new Handler().postDelayed(() -> {
                                Log.e("arr_size","The size of the arr is : "+emplist_arr.size());
                                emp_analysis_empattend_rate_rec.setLayoutManager(new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false));
                                empAttendancePerformAdapter = new EmpAttendancePerformAdapter(emplist_arr, getApplicationContext());
                                emp_analysis_empattend_rate_rec.setAdapter(empAttendancePerformAdapter);
                                empAttendancePerformAdapter.notifyDataSetChanged();
                            },2500);
                        }
                        else{
                            emp_analysis_empattend_rate_lay.setVisibility(View.GONE);
                            emp_analysis_empperformance_rate_lay.setVisibility(View.GONE);
                            Snackbar.make(emp_analysis_mainlay,"No Employees added yet !! Add Employees and try again", Snackbar.LENGTH_SHORT).show();
                        }
                    }
                    else{
                        emp_analysis_empattend_rate_lay.setVisibility(View.GONE);
                        emp_analysis_empperformance_rate_lay.setVisibility(View.GONE);
                        String msg= task.getException()!=null && task.getException().getLocalizedMessage()!=null ?
                                task.getException().getLocalizedMessage() : "No Error";
                        Log.e("firebase_error", "The error 01 is : "+msg);
                    }
                });
    }
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


package com.rushikeshsantoshv.wetrack.Activities;

import android.annotation.SuppressLint;
import android.app.Dialog;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.LinearLayout;

import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.android.material.snackbar.Snackbar;
import com.google.firebase.Timestamp;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.Query;
import com.rushikeshsantoshv.wetrack.Adapters.EmpAttendancePerformAdapter;
import com.rushikeshsantoshv.wetrack.DataModels.EmpAttendanceRateModel;
import com.rushikeshsantoshv.wetrack.DataModels.Functions;
import com.rushikeshsantoshv.wetrack.R;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

public class EmployeeAnalysisActivity extends AppCompatActivity {

    LinearLayout emp_analysis_intask_addemp_btn, emp_analysis_intask_takeattend_btn, emp_analysis_empattend_rate_lay, emp_analysis_empperformance_rate_lay;
    RecyclerView emp_analysis_empattend_rate_rec, emp_analysis_empperformance_rate_rec;
    LinearLayout emp_analysis_mainlay;

    String comp_path;
    FirebaseAuth firebaseAuth;
    FirebaseUser firebaseUser;
    FirebaseFirestore db;
    Functions functions = new Functions();
    EmpAttendancePerformAdapter empAttendancePerformAdapter;
    ArrayList<EmpAttendanceRateModel> emplist_arr = new ArrayList<>();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_employee_analysis);

        new Functions().coloredStatusBarDarkTextDesign(this, R.color.maincolor_light, R.color.white);

        employeeAnalysisInits();

        loadEmployeesList();
    }

    private void employeeAnalysisInits() {
        emp_analysis_mainlay = findViewById(R.id.emp_analysis_mainlay);
        emp_analysis_intask_addemp_btn = findViewById(R.id.emp_analysis_intask_addemp_btn);
        emp_analysis_intask_takeattend_btn = findViewById(R.id.emp_analysis_intask_takeattend_btn);
        emp_analysis_empattend_rate_rec = findViewById(R.id.emp_analysis_empattend_rate_rec);
        emp_analysis_empperformance_rate_rec = findViewById(R.id.emp_analysis_empperformance_rate_rec);
        emp_analysis_empattend_rate_lay = findViewById(R.id.emp_analysis_empattend_rate_lay);
        emp_analysis_empperformance_rate_lay = findViewById(R.id.emp_analysis_empperformance_rate_lay);
        firebaseAuth = FirebaseAuth.getInstance();
        firebaseUser = firebaseAuth.getCurrentUser();
        db = FirebaseFirestore.getInstance();
        comp_path = new Functions().getSharedPrefsValue(getApplicationContext(), "user_data", "company_path", "string", null);
    }

    @SuppressLint("NotifyDataSetChanged")
    private void loadEmployeesList() {

        Dialog loading_dialog = functions.createDialogBox(this, R.layout.loading_dialog, false);
        loading_dialog.show();

        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.DAY_OF_MONTH, 1);
        cal.set(Calendar.YEAR, Integer.parseInt(functions.getTodayDate("yyyy")));
        cal.set(Calendar.MONTH, Integer.parseInt(functions.getTodayDate("MM")));

        Timestamp startOfMonth = new Timestamp(cal.getTime());
        cal.add(Calendar.MONTH, 1);
        Timestamp startOfNextMonth = new Timestamp(cal.getTime());

        db.collection("Employees")
                .whereEqualTo("company_path", db.document(comp_path))
                .get()
                .addOnCompleteListener(task -> {
                    if (task.isSuccessful()) {
                        if (task.getResult().getDocuments().size() > 0) {
                            List<DocumentSnapshot> emp_list = task.getResult().getDocuments();
                            for (DocumentSnapshot doc : emp_list) {
                                DocumentReference emp_reference = doc.getReference();
                                db.collection("Attendances")
                                        .whereEqualTo("attend_emp_reference", emp_reference)
                                        .orderBy("attend_date", Query.Direction.DESCENDING)
                                        .get()
                                        .addOnCompleteListener(task1 -> {
                                            if (task1.isSuccessful()) {
                                                if (task1.getResult().getDocuments().size() > 0) {
                                                    long present_count = 0, half_day_count = 0, absent_count = 0;
                                                    List<DocumentSnapshot> attendance_arr = task1.getResult().getDocuments();
                                                    for (DocumentSnapshot attendance : attendance_arr) {
                                                        Timestamp att_timestamp = attendance.getTimestamp("attend_date");
                                                        if (functions.getStringFromDate(att_timestamp.toDate(), "MM/yyyy")
                                                                .equals(functions.getTodayDate("MM/yyyy"))) {
                                                            present_count += (attendance.getLong("attend_status") == 1) ? 1 : 0;
                                                            half_day_count += (attendance.getLong("attend_status") == 2) ? 1 : 0;
                                                            absent_count += (attendance.getLong("attend_status") == 3) ? 1 : 0;
                                                        } else break;
                                                    }

                                                    emplist_arr.add(new EmpAttendanceRateModel(doc.getString("emp_name"),
                                                            doc.getString("emp_contact"), 0, present_count,
                                                            half_day_count, absent_count));
                                                }
                                                else {
                                                    Snackbar.make(emp_analysis_mainlay, "No attendances taken yet !! Please take the attendances and check for analysis", Snackbar.LENGTH_SHORT).show();
                                                }
                                            }
                                            else {
                                                String msg = task1.getException() != null && task1.getException().getLocalizedMessage() != null ?
                                                        task1.getException().getLocalizedMessage() : "No Error";
                                                Log.e("firebase_error", "The error 02 is : " + msg);
                                            }
                                        });
                            }
                            emp_analysis_empattend_rate_rec.setLayoutManager(new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false));
                            empAttendancePerformAdapter = new EmpAttendancePerformAdapter(emplist_arr, getApplicationContext());
                            emp_analysis_empattend_rate_rec.setAdapter(empAttendancePerformAdapter);
                            empAttendancePerformAdapter.notifyDataSetChanged();
                        } else {
                            emp_analysis_empattend_rate_lay.setVisibility(View.GONE);
                            emp_analysis_empperformance_rate_lay.setVisibility(View.GONE);
                            Snackbar.make(emp_analysis_mainlay, "No Employees added yet !! Add Employees and try again", Snackbar.LENGTH_SHORT).show();
                        }
                    } else {
                        emp_analysis_empattend_rate_lay.setVisibility(View.GONE);
                        emp_analysis_empperformance_rate_lay.setVisibility(View.GONE);
                        String msg = task.getException() != null && task.getException().getLocalizedMessage() != null ?
                                task.getException().getLocalizedMessage() : "No Error";
                        Log.e("firebase_error", "The error 01 is : " + msg);
                    }
                });
    }


}


////////////////////////////////////////////// Main ////////////////////////////////////////////////////////////////////////

package com.rushikeshsantoshv.wetrack.Adapters;

import android.annotation.SuppressLint;
import android.content.Context;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RatingBar;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;
import com.github.mikephil.charting.charts.BarChart;
import com.google.firebase.Timestamp;
import com.google.firebase.database.annotations.NotNull;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.Query;
import com.rushikeshsantoshv.wetrack.DataModels.EmpAttendanceRateModel;
import com.rushikeshsantoshv.wetrack.DataModels.Functions;
import com.rushikeshsantoshv.wetrack.R;

import org.json.JSONException;
import org.json.JSONObject;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EmpAttendancePerformAdapter extends RecyclerView.Adapter<EmpAttendancePerformAdapter.ListViewHolder> {

    ArrayList<EmpAttendanceRateModel> attendance_rate_arr;
    Context context;
    FirebaseFirestore db;
    Functions functions = new Functions();

    public EmpAttendancePerformAdapter(ArrayList<EmpAttendanceRateModel> attendance_rate_arr, Context context) {
        this.attendance_rate_arr = attendance_rate_arr;
        this.context = context;
    }

    @NonNull
    @Override
    public ListViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        @SuppressLint("InflateParams") View inflate = LayoutInflater.from(parent.getContext()).inflate(R.layout.emp_analysis_item, null);
        return new ListViewHolder(inflate);
    }

    @SuppressLint("SetTextI18n")
    @Override
    public void onBindViewHolder(@NonNull ListViewHolder holder, int position) {

        db = FirebaseFirestore.getInstance();

        holder.eanalysis_item_pie.setVisibility(View.GONE);
        holder.eanalysis_item_empdetails_txt.setText("Name : " + attendance_rate_arr.get(position).getEmp_name() +
                "\nContact : " + attendance_rate_arr.get(position).getPhone()
                + "\nPresent Colunt : " + attendance_rate_arr.get(position).getPresent_count()
                + "\nHalf Day Colunt : " + attendance_rate_arr.get(position).getHalfday_count()
                + "\nAbsent Colunt : " + attendance_rate_arr.get(position).getAbsent_count());

        float rate = Float.parseFloat(String.valueOf(attendance_rate_arr.get(position).getRate_num()));
        holder.eanalysis_item_ratingbar.setRating(rate);

        db.collection("Attendances")
                .whereEqualTo("attend_emp_reference", attendance_rate_arr.get(position).getEmp_reference())
                .orderBy("attend_date", Query.Direction.DESCENDING)
                .get()
                .addOnCompleteListener(task1 -> {
                    if (task1.isSuccessful()) {
                        if (task1.getResult().getDocuments().size() > 0) {
                            long present_count = 0, half_day_count = 0, absent_count = 0;
                            List<DocumentSnapshot> attendance_arr = task1.getResult().getDocuments();
                            for (DocumentSnapshot attendance : attendance_arr) {
                                Timestamp att_timestamp = attendance.getTimestamp("attend_date");
                                if (functions.getStringFromDate(att_timestamp.toDate(), "MM/yyyy")
                                        .equals(functions.getTodayDate("MM/yyyy"))) {
                                    present_count += (attendance.getLong("attend_status") == 1) ? 1 : 0;
                                    half_day_count += (attendance.getLong("attend_status") == 2) ? 1 : 0;
                                    absent_count += (attendance.getLong("attend_status") == 3) ? 1 : 0;
                                } else break;
                            }

                            holder.eanalysis_item_empdetails_txt.setText("Name : " + attendance_rate_arr.get(position).getEmp_name() +
                                    "\nContact : " + attendance_rate_arr.get(position).getPhone()+ "\nPresent Colunt : " + present_count
                                    + "\nHalf Day Colunt : " + half_day_count+ "\nAbsent Colunt : " + absent_count);

                            RequestQueue queue = Volley.newRequestQueue(context);
                            String url = "https://wetrackpredictions.pythonanywhere.com/AttendanceAnalysis";

                            long val1 = present_count;
                            long val2 = half_day_count;
                            long val3 = absent_count;

                            long finalHalf_day_count = half_day_count;
                            long finalAbsent_count = absent_count;
                            long finalPresent_count = present_count;
                            JsonObjectRequest request = new JsonObjectRequest(Request.Method.POST, url, null,
                                    response -> {
                                        try {
                                            String prediction_res = response.getString("attendance_analysis_res");
                                            String prediction_status = response.getString("attendance_analysis_status");
                                            Log.e("attendance_analysis_res", "The result is : " + prediction_res + " and the result status is : " + prediction_status);

                                            float result = Float.parseFloat(prediction_res);
                                            DecimalFormat df = new DecimalFormat("#.##");
                                            result = Float.parseFloat(df.format(result));

                                            holder.eanalysis_item_ratingbar.setRating(result);

                                        } catch (JSONException e) {
                                            Log.e("volley_error", "Some Error Occurred while parsing json data !! Error : " + e.getLocalizedMessage());
                                        }
                                    },
                                    error -> {
                                        Log.e("volley_error", "Some Error Occurred while retrieving json data !! Error : " + error.getLocalizedMessage());
                                    }) {
                                @Override
                                public byte[] getBody() {
                                    HashMap<String, Object> params = new HashMap<>();
                                    params.put("val1", val1);
                                    params.put("val2", val2);
                                    params.put("val3", val3);
                                    String requestBody = new JSONObject(params).toString();
                                    return requestBody.getBytes();
                                }

                                @Override
                                public @NotNull
                                Map<String, String> getHeaders() {
                                    HashMap<String, String> headers = new HashMap<>();
                                    headers.put("User-Agent", "Mozilla/5.0");
                                    return headers;
                                }

                                @Override
                                public String getBodyContentType() {
                                    return "application/json";
                                }
                            };
                            queue.add(request);
                        }
                    }
                });
    }

    @Override
    public int getItemCount() {
        return attendance_rate_arr.size();
    }

    public class ListViewHolder extends RecyclerView.ViewHolder {

        LinearLayout eanalysis_item_mainlay;
        BarChart eanalysis_item_pie;
        RatingBar eanalysis_item_ratingbar;
        TextView eanalysis_item_empdetails_txt;

        public ListViewHolder(@NonNull View itemView) {
            super(itemView);

            eanalysis_item_mainlay = itemView.findViewById(R.id.eanalysis_item_mainlay);
            eanalysis_item_pie = itemView.findViewById(R.id.eanalysis_item_pie);
            eanalysis_item_ratingbar = itemView.findViewById(R.id.eanalysis_item_ratingbar);
            eanalysis_item_empdetails_txt = itemView.findViewById(R.id.eanalysis_item_empdetails_txt);
        }
    }
}


------------------------------------------------------------------------------------------------------------------------------

package com.rushikeshsantoshv.wetrack.Activities;

import android.annotation.SuppressLint;
import android.app.Dialog;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.LinearLayout;

import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.android.material.snackbar.Snackbar;
import com.google.firebase.Timestamp;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;
import com.rushikeshsantoshv.wetrack.Adapters.EmpAttendancePerformAdapter;
import com.rushikeshsantoshv.wetrack.DataModels.EmpAttendanceRateModel;
import com.rushikeshsantoshv.wetrack.DataModels.Functions;
import com.rushikeshsantoshv.wetrack.R;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

public class EmployeeAnalysisActivity extends AppCompatActivity {

    LinearLayout emp_analysis_intask_addemp_btn, emp_analysis_intask_takeattend_btn, emp_analysis_empattend_rate_lay, emp_analysis_empperformance_rate_lay;
    RecyclerView emp_analysis_empattend_rate_rec, emp_analysis_empperformance_rate_rec;
    LinearLayout emp_analysis_mainlay;

    String comp_path;
    FirebaseAuth firebaseAuth;
    FirebaseUser firebaseUser;
    FirebaseFirestore db;
    Functions functions = new Functions();
    EmpAttendancePerformAdapter empAttendancePerformAdapter;
    ArrayList<EmpAttendanceRateModel> emplist_arr = new ArrayList<>();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_employee_analysis);

        new Functions().coloredStatusBarDarkTextDesign(this, R.color.maincolor_light, R.color.white);

        employeeAnalysisInits();

        loadEmployeesList();
    }

    private void employeeAnalysisInits() {
        emp_analysis_mainlay = findViewById(R.id.emp_analysis_mainlay);
        emp_analysis_intask_addemp_btn = findViewById(R.id.emp_analysis_intask_addemp_btn);
        emp_analysis_intask_takeattend_btn = findViewById(R.id.emp_analysis_intask_takeattend_btn);
        emp_analysis_empattend_rate_rec = findViewById(R.id.emp_analysis_empattend_rate_rec);
        emp_analysis_empperformance_rate_rec = findViewById(R.id.emp_analysis_empperformance_rate_rec);
        emp_analysis_empattend_rate_lay = findViewById(R.id.emp_analysis_empattend_rate_lay);
        emp_analysis_empperformance_rate_lay = findViewById(R.id.emp_analysis_empperformance_rate_lay);
        firebaseAuth = FirebaseAuth.getInstance();
        firebaseUser = firebaseAuth.getCurrentUser();
        db = FirebaseFirestore.getInstance();
        comp_path = new Functions().getSharedPrefsValue(getApplicationContext(), "user_data", "company_path", "string", null);
    }

    @SuppressLint("NotifyDataSetChanged")
    private void loadEmployeesList() {

        Dialog loading_dialog = functions.createDialogBox(this, R.layout.loading_dialog, false);
        loading_dialog.show();

        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.DAY_OF_MONTH, 1);
        cal.set(Calendar.YEAR, Integer.parseInt(functions.getTodayDate("yyyy")));
        cal.set(Calendar.MONTH, Integer.parseInt(functions.getTodayDate("MM")));

        Timestamp startOfMonth = new Timestamp(cal.getTime());
        cal.add(Calendar.MONTH, 1);
        Timestamp startOfNextMonth = new Timestamp(cal.getTime());

        db.collection("Employees")
                .whereEqualTo("company_path", db.document(comp_path))
                .get()
                .addOnCompleteListener(task -> {
                    if (task.isSuccessful()) {
                        AtomicInteger counter = new AtomicInteger(0);
                        if (task.getResult().getDocuments().size() > 0) {
                            List<DocumentSnapshot> emp_list = task.getResult().getDocuments();
                            for (DocumentSnapshot doc : emp_list) {
                                DocumentReference emp_reference = doc.getReference();
                                emplist_arr.add(new EmpAttendanceRateModel(emp_reference, doc.getString("emp_name"),
                                        doc.getString("emp_contact"), 0, 0,
                                        0, 0));
                            }
                            loading_dialog.dismiss();
                            emp_analysis_empattend_rate_rec.setLayoutManager(new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false));
                            empAttendancePerformAdapter = new EmpAttendancePerformAdapter(emplist_arr, getApplicationContext());
                            emp_analysis_empattend_rate_rec.setAdapter(empAttendancePerformAdapter);
                            empAttendancePerformAdapter.notifyDataSetChanged();
                        }
                        else {
                            counter.incrementAndGet();
                            emp_analysis_empattend_rate_lay.setVisibility(View.GONE);
                            emp_analysis_empperformance_rate_lay.setVisibility(View.GONE);
                            Snackbar.make(emp_analysis_mainlay, "No Employees added yet !! Add Employees and try again", Snackbar.LENGTH_SHORT).show();
                        }
                    }
                    else {
                        emp_analysis_empattend_rate_lay.setVisibility(View.GONE);
                        emp_analysis_empperformance_rate_lay.setVisibility(View.GONE);
                        String msg = task.getException() != null && task.getException().getLocalizedMessage() != null ?
                                task.getException().getLocalizedMessage() : "No Error";
                        Log.e("firebase_error", "The error 01 is : " + msg);
                    }
                });
    }


}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

package com.rushikeshsantoshv.wetrack.Activities;

import android.Manifest;
import android.app.Dialog;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.demogorgorn.monthpicker.MonthPickerDialog;
import com.google.android.gms.tasks.Task;
import com.google.android.material.bottomsheet.BottomSheetDialog;
import com.google.android.material.snackbar.Snackbar;
import com.google.android.material.textfield.TextInputLayout;
import com.google.firebase.Timestamp;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.Query;
import com.google.firebase.firestore.QuerySnapshot;
import com.karumi.dexter.Dexter;
import com.karumi.dexter.MultiplePermissionsReport;
import com.karumi.dexter.PermissionToken;
import com.karumi.dexter.listener.PermissionRequest;
import com.karumi.dexter.listener.multi.MultiplePermissionsListener;
import com.rushikeshsantoshv.wetrack.Adapters.AnnualReportAdapter;
import com.rushikeshsantoshv.wetrack.DataModels.AnnualReportModel;
import com.rushikeshsantoshv.wetrack.DataModels.Functions;
import com.rushikeshsantoshv.wetrack.R;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnnualReportActivity extends AppCompatActivity {

    TextView annualreport_generatereport_btn;
    RecyclerView annualreport_finalrec;
    ImageButton annualreport_back_btn, annualreport_calender_btn, annualreport_calprev_date, annualreport_calnext_date;
    TextView annualreport_curr_date;
    RelativeLayout annualreport_mainlay;

    FirebaseFirestore db;
    FirebaseAuth firebaseAuth;
    FirebaseUser firebaseUser;
    String comp_path;
    Long curr_fin_year;
    Long min_fin_year;
    Long max_fin_year;
    Timestamp comp_created_year;
    AnnualReportModel model;
    ArrayList<AnnualReportModel> annual_report_arr = new ArrayList<>();

    Intent getData;
    String emp_path;
    long present_count = 0, half_day_count = 0, absent_count = 0;
    private String currMonth="Sample";
    private int daysWorked=0, fullPresentCount=0, halfPresentCount=0;
    private double govtBaseRate =0, compBaseRate= 0;
    private double advancePaid= 0, prevLoanBalance= 0, additionalArrears= 0;

    AnnualReportAdapter annualReportAdapter;
    Functions functions = new Functions();
    File folderDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS + "/WeTrack");

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_annual_report);
        functions.coloredStatusBarDarkTextDesign(AnnualReportActivity.this, R.color.maincolor_light, R.color.white);

        annualReportInits();

        emp_path = (getData != null && getData.getStringExtra("emp_reference_id") != null
                && !getData.getStringExtra("emp_reference_id").equals("")) ?
                getData.getStringExtra("emp_reference_id") : "Employees/sampleuser";

        db.collection("Companies")
                .document(db.document(comp_path).getId())
                .get()
                .addOnCompleteListener(task -> {
                    comp_created_year = (task.isSuccessful()
                            && task.getResult().getTimestamp("company_created") != null ?
                            task.getResult().getTimestamp("company_created") : Timestamp.now());

                    min_fin_year = Long.parseLong(functions.getStringFromDate(comp_created_year.toDate(), "yyyy"));

                    annualreport_calender_btn.setOnClickListener(v -> {
                        MonthPickerDialog.Builder builder = new MonthPickerDialog.Builder(AnnualReportActivity.this,
                                (month, year) -> {
                                    curr_fin_year = (long) year;
                                    annualreport_curr_date.setText(String.valueOf(curr_fin_year));
                                    checkGovtBaseRateAndLoadAnnualReport();
                                }, Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH));

                        builder.setActivatedYear(Integer.parseInt(functions.getTodayDate("yyyy")))
                                .setMinYear(Math.toIntExact(min_fin_year))
                                .setMaxYear(Math.toIntExact(max_fin_year))
                                .showYearOnly()
                                .setTitle("Select Desired Financial Year")
                                .build().show();
                    });
                });

        checkGovtBaseRateAndLoadAnnualReport();

        annualreport_generatereport_btn.setOnClickListener(v -> {
            Dexter.withContext(AnnualReportActivity.this)
                    .withPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_EXTERNAL_STORAGE)
                    .withListener(new MultiplePermissionsListener() {

                        @Override
                        public void onPermissionsChecked(MultiplePermissionsReport multiplePermissionsReport) {
                            try {

                                if (!folderDir.exists()) {
                                    folderDir.mkdirs();
                                }

                                File file = new File(folderDir, "Demo.xls");
                                HSSFWorkbook hssfWorkbook = new HSSFWorkbook();
                                HSSFSheet sheet = hssfWorkbook.createSheet();
                                HSSFRow row = sheet.createRow(0);
                                HSSFCell cell = row.createCell(0);
                                cell.setCellValue("Sample Data");

                                FileOutputStream fileOutputStream = new FileOutputStream(file);
                                hssfWorkbook.write(fileOutputStream);

                                fileOutputStream.flush();
                                fileOutputStream.close();

                            } catch (Exception e) {
                                Log.e("file_error", "The file error is : " + e);
                            }
                        }

                        @Override
                        public void onPermissionRationaleShouldBeShown(List<PermissionRequest> list, PermissionToken permissionToken) {
                            permissionToken.continuePermissionRequest();
                        }
                    }).check();
        });
    }

    private void checkGovtBaseRateAndLoadAnnualReport() {

        currMonth="Sample";
        daysWorked=0;
        fullPresentCount=0;
        halfPresentCount=0;
        govtBaseRate =0;
        compBaseRate= 0;
        advancePaid= 0;
        prevLoanBalance= 0;
        additionalArrears= 0;
        present_count = 0;
        half_day_count = 0;
        absent_count = 0;
        model= new AnnualReportModel();
        if(annual_report_arr.size() > 0) annual_report_arr.clear();

        Long financial_year = annualreport_curr_date.getText().equals(functions.getTodayDate("yyyy")) ?
                (functions.getMonthList().indexOf(functions.getTodayDate("MMM").toLowerCase()) <= 2 ?
                        Long.parseLong(functions.getModifiedMonthTodayDate("yyyy", -1)) :
                        Long.parseLong(functions.getTodayDate("yyyy"))) : Long.parseLong(annualreport_curr_date.getText().toString());

        // Long financial_year = 2022L;

        int curr_month = annualreport_curr_date.getText().equals(functions.getTodayDate("yyyy")) ?
                functions.getMonthList().indexOf(functions.getTodayDate("MMM").toLowerCase()) :
                functions.getMonthList().indexOf("mar");
        // int curr_month = functions.getMonthList().indexOf("mar");
        ArrayList<String> notadded_rates = new ArrayList<>();

        db.collection("GovtBaseRate")
                .whereEqualTo("company_reference", db.document(comp_path))
                .whereEqualTo("financial_year", financial_year)
                .get()
                .addOnCompleteListener(task -> {
                    if (task.isSuccessful()) {
                        if (task.getResult().getDocuments().size() > 0) {
                            DocumentSnapshot doc = task.getResult().getDocuments().get(0);
                            boolean check_rate = true;
                            for (int i = 0; i <= curr_month; i++) {
                                if (!doc.contains(functions.getMonthList().get(i) + "_rate")) {
                                    notadded_rates.add(functions.getMonthList().get(i));
                                    check_rate = false;
                                }
                            }

                            if (!check_rate) {
                                addGovtRateToDB(financial_year, curr_month, notadded_rates, doc, false);
                            }

                        } else {
                            Log.e("firebase_error", "The error is : no size");
                            for (int i = 0; i <= curr_month; i++) {
                                notadded_rates.add(functions.getMonthList().get(i));
                            }
                            for (String item : notadded_rates) {
                                Log.e("month_item", "The item is : " + item + " and current month is : " + curr_month);
                            }
                            addGovtRateToDB(financial_year, curr_month, notadded_rates, null, true);
                        }
                    } else {
                        String msg = task.getException() != null && task.getException().getLocalizedMessage() != null ? task.getException().getLocalizedMessage() : "No Error ...";
                        Log.e("firebase_error", "The error is : " + msg);
                    }
                });

        Dialog loading_dialog= functions.createDialogBox(AnnualReportActivity.this, R.layout.loading_dialog,false);
        loading_dialog.show();

        Log.e("user_reference", emp_path);
        db.collection("Employees")
                .document(db.document(emp_path).getId())
                .get()
                .addOnCompleteListener(task1 -> {
                    if(task1.isSuccessful()){
                        /*arrears_amount = task1.isSuccessful() ? task1.getResult().getLong("emp_sal_arrears") : 0;
                        loan_amount = task1.isSuccessful() ? task1.getResult().getLong("emp_advance_loans") : 0;
                        emp_sal_paid = task1.isSuccessful() ? task1.getResult().getLong("emp_sal_paid") : 0;
                        emp_sal_total = task1.isSuccessful() ? task1.getResult().getLong("emp_sal_total") : 0;*/

                        Timestamp start_timestamp;
                        Timestamp end_timestamp;
                        Calendar start_calendar = Calendar.getInstance();
                        Calendar end_calender = Calendar.getInstance();
                        start_calendar.set(Calendar.YEAR, Math.toIntExact(financial_year));
                        start_calendar.set(Calendar.MONTH, 3);
                        start_calendar.set(Calendar.DAY_OF_MONTH, 1);

                        if (financial_year == Long.parseLong(functions.getTodayDate("yyyy")) ||
                                financial_year == Long.parseLong(functions.getModifiedYearTodayDate("yyyy", -1))) {
                            Log.e("condition_check", "IF Entered...");
                            end_calender.set(Calendar.YEAR, financial_year == Long.parseLong(functions.getTodayDate("yyyy")) ?
                                    Math.toIntExact(financial_year) : (Math.toIntExact(financial_year) + 1));
                            end_calender.set(Calendar.MONTH, financial_year == Long.parseLong(functions.getTodayDate("yyyy")) ?
                                    (Integer.parseInt(functions.getTodayDate("MM")) - 2) : 2);
                            end_calender.set(Calendar.DAY_OF_MONTH, end_calender.getActualMaximum(Calendar.DAY_OF_MONTH));

                            start_timestamp = new Timestamp(functions.getDateFromString(functions.getStringFromDate(start_calendar.getTime(),
                                    "dd/MM/yyyy"), "dd/MM/yyyy"));

                            end_timestamp = new Timestamp(functions.getDateFromString(functions.getStringFromDate(end_calender.getTime(),
                                    "dd/MM/yyyy"), "dd/MM/yyyy"));
                        }
                        else {
                            Log.e("condition_check", "ELSE Entered...");
                            end_calender.set(Calendar.YEAR, Math.toIntExact(financial_year) + 1);
                            end_calender.set(Calendar.MONTH, 2);
                            end_calender.set(Calendar.DAY_OF_MONTH, end_calender.getActualMaximum(Calendar.DAY_OF_MONTH));

                            start_timestamp = new Timestamp(functions.getDateFromString(functions.getStringFromDate(start_calendar.getTime(),
                                    "dd/MM/yyyy"), "dd/MM/yyyy"));

                            end_timestamp = new Timestamp(functions.getDateFromString(functions.getStringFromDate(end_calender.getTime(),
                                    "dd/MM/yyyy"), "dd/MM/yyyy"));
                        }

                        Log.e("timestamp", "The start timestamp is : " + functions.getStringFromDate(
                                start_timestamp.toDate(), "dd/MM/yyyy") + " & end timestamp is : " + functions.getStringFromDate(
                                end_timestamp.toDate(), "dd/MM/yyyy") + " and total months are : ");

                        for (int i = 0; i <= functions.getTotalNoOfMonths(start_calendar, end_calender); i++) {
                            Calendar c1 = Calendar.getInstance();
                            c1.set(Calendar.DAY_OF_MONTH, 1);
                            c1.set(Calendar.MONTH, functions.getThreeLetterMonths().indexOf(functions.getMonthList().get(i)));
                            c1.set(Calendar.YEAR, start_calendar.get(Calendar.YEAR));
                            Timestamp t1 = new Timestamp(functions.getDateFromString(functions.getStringFromDate(c1.getTime(), "dd/MM/yyyy"), "dd/MM/yyyy"));

                            Calendar c2 = Calendar.getInstance();
                            c2.set(Calendar.DAY_OF_MONTH, c1.getActualMaximum(Calendar.DAY_OF_MONTH));
                            c2.set(Calendar.MONTH, c1.get(Calendar.MONTH));
                            c2.set(Calendar.YEAR, c1.get(Calendar.YEAR));
                            Timestamp t2 = new Timestamp(functions.getDateFromString(functions.getStringFromDate(c2.getTime(), "dd/MM/yyyy"), "dd/MM/yyyy"));

                            int i1 = i;
                            db.collection("Attendances")
                                    .whereEqualTo("attend_emp_reference", db.document(emp_path))
                                    .whereGreaterThanOrEqualTo("attend_date", (Timestamp) t1)
                                    .whereLessThanOrEqualTo("attend_date", (Timestamp) t2)
                                    .orderBy("attend_date", Query.Direction.DESCENDING)
                                    .get()
                                    .addOnCompleteListener(task2 -> {
                                        if (task2.isSuccessful()) {
                                            if (task2.getResult().getDocuments().size() > 0) {

                                                List<DocumentSnapshot> attendance_arr = task2.getResult().getDocuments();
                                                for (DocumentSnapshot attendance : attendance_arr) {
                                                    present_count += (attendance.getLong("attend_status") == 1) ? 1 : 0;
                                                    half_day_count += (attendance.getLong("attend_status") == 2) ? 1 : 0;
                                                    absent_count += (attendance.getLong("attend_status") == 3) ? 1 : 0;
                                                }

                                                daysWorked = Math.toIntExact(present_count + halfPresentCount);
                                                fullPresentCount = Math.toIntExact(present_count);
                                                halfPresentCount = Math.toIntExact(half_day_count);
                                                Calendar currCalender = Calendar.getInstance();
                                                currCalender.setTime(t1.toDate());
                                                currMonth = functions.getMonthFullName(functions.getThreeLetterMonths().indexOf(functions.getMonthList().get(i1)));

                                                Log.e("curr_month","The current month is : "+currMonth);
                                                db.collection("Payments")
                                                        .whereEqualTo("pemp_emp_reference", db.document(emp_path))
                                                        .whereGreaterThanOrEqualTo("pemp_timestamp", t1)
                                                        .whereLessThanOrEqualTo("pemp_timestamp", t2)
                                                        .orderBy("pemp_timestamp", Query.Direction.DESCENDING)
                                                        .get()
                                                        .addOnCompleteListener(task3 -> {
                                                            if (task3.isSuccessful()) {
                                                                if (task3.getResult().getDocuments().size() > 0) {
                                                                    Log.e("data", "The company base rate of "+currMonth+" is : " + task3.getResult().getDocuments().get(0).getLong("pemp_base_rate"));
                                                                    db.collection("GovtBaseRate")
                                                                            .whereEqualTo("company_reference", db.document(comp_path))
                                                                            .whereEqualTo("financial_year", financial_year)
                                                                            .get()
                                                                            .addOnCompleteListener(task4 -> {
                                                                                if(task4.isSuccessful()){
                                                                                    if(task4.getResult().getDocuments().size() > 0){
                                                                                        loading_dialog.dismiss();
                                                                                    }
                                                                                    else{
                                                                                        Log.e("res_error","04 Array No Size");
                                                                                    }
                                                                                }
                                                                                else{
                                                                                    String msg= task4.getException()!=null && task4.getException().getLocalizedMessage()!=null ? task4.getException().getLocalizedMessage() : "No Error !!";
                                                                                    Log.e("firebase_error","04 Error is : "+msg);
                                                                                    loading_dialog.cancel();
                                                                                }
                                                                            });
                                                                }
                                                                else {
                                                                    Log.e("res_error", "02 Array No Size");
                                                                }
                                                            }
                                                            else {
                                                                String msg= task3.getException()!=null && task3.getException().getLocalizedMessage()!=null ? task3.getException().getLocalizedMessage() : "No Error !!";
                                                                Log.e("firebase_error","03 Error is : "+msg);
                                                                loading_dialog.cancel();
                                                            }
                                                        });

                                                /*Log.e("companybaserate_error", "The company path is : " + comp_path);
                                                db.collection("Loans")
                                                        .whereEqualTo("loan_emp_reference", db.document(emp_reference_id))
                                                        .whereEqualTo("loan_company_reference", db.document(comp_path))
                                                        .orderBy("loan_timestamp", Query.Direction.ASCENDING)
                                                        .get()
                                                        .addOnCompleteListener(task1111 -> {
                                                            if (task1111.isSuccessful()) {
                                                                if (task1111.getResult().getDocuments().size() > 0) {
                                                                    String rate_field = functions.getTodayDate("MMM").toLowerCase();
                                                                    company_base_rate = task1111.getResult().getDocuments().get(0).getLong(rate_field + "_rate");
                                                                    makepayments_baserate.getEditText().setText("" + company_base_rate);

                                                                    salary_amount = (present_count * company_base_rate) + (half_day_count * (company_base_rate / 2));
                                                                    loan_payable_amount = Math.min(loan_amount, salary_amount);
                                                                    makepayments_arrears.setText("₹ " + arrears_amount);
                                                                    makepayments_amtadvanceloan.setText("₹ " + loan_amount);
                                                                    makepayments_amtadvanceloan_giving.getEditText().setFilters(new InputFilter[]{new InputFilterMinMax(String.valueOf(0), String.valueOf(loan_payable_amount))});
                                                                    makepayments_amtadvanceloan_giving.getEditText().setText(String.valueOf(0));
                                                                    makepayments_amtpending.setText("₹ " + salary_amount);
                                                                    makepayments_amtpending_giving.getEditText().setText("" + salary_amount);
                                                                    total_amount = salary_amount + arrears_amount;
                                                                    makepayments_amtpending_giving.getEditText().setFilters(new InputFilter[]{new InputFilterMinMax(String.valueOf(0), String.valueOf(salary_amount))});
                                                                    updateGivingTotalAmount(true);
                                                                    makepayments_total.setText("₹ " + total_amount);
                                                                    loading_dialog.dismiss();
                                                                } else {
                                                                    Snackbar.make(paymentrecords_mainlay, "No CompanyBaseRate Found !!", Snackbar.LENGTH_SHORT).show();
                                                                }
                                                            } else {
                                                                loading_dialog.dismiss();
                                                                makepayments_baserate.getEditText().setText("" + 0);
                                                                String msg = task12.getException() != null && task12.getException().getLocalizedMessage() != null ? task12.getException().getLocalizedMessage() : "No Error ...";
                                                                Log.e("firebase_error", "Inner 2 Firebase Error : " + msg);
                                                            }
                                                        });*/

                                            }
                                            else{
                                                Log.e("res_error","02 Array No Size");
                                            }
                                        }
                                        else {
                                            String msg= task2.getException()!=null && task2.getException().getLocalizedMessage()!=null ? task2.getException().getLocalizedMessage() : "No Error !!";
                                            Log.e("firebase_error","02 Error is : "+msg);
                                            loading_dialog.cancel();
                                        }
                                    });

                            new Handler().postDelayed(() -> {
                                model= new AnnualReportModel(currMonth,daysWorked,fullPresentCount, halfPresentCount,
                                        govtBaseRate,compBaseRate, advancePaid, prevLoanBalance, additionalArrears);
                                annual_report_arr.add(model);
                            },2000);
                        }
                    }
                    else{
                        String msg= task1.getException()!=null && task1.getException().getLocalizedMessage()!=null ? task1.getException().getLocalizedMessage() : "No Error !!";
                        Log.e("firebase_error","01 Error is : "+msg);
                        loading_dialog.cancel();
                    }
                });

        new Handler().postDelayed(() -> {
            annualReportAdapter = new AnnualReportAdapter(getApplicationContext(),annual_report_arr);
            annualreport_finalrec.setLayoutManager(new LinearLayoutManager(getApplicationContext()));
            annualreport_finalrec.setAdapter(annualReportAdapter);
            annualReportAdapter.notifyDataSetChanged();
        },4000);
    }

    private void addGovtRateToDB(Long financial_year, int curr_month, ArrayList<String> notadded_rates, DocumentSnapshot doc, boolean isadd) {
        BottomSheetDialog dialog = new BottomSheetDialog(AnnualReportActivity.this, R.style.BottomSheetTheme);
        dialog.setContentView(R.layout.add_company_rate_btmdialog);
        dialog.setCanceledOnTouchOutside(false);
        dialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
        dialog.show();

        dialog.setOnCancelListener(dialogInterface -> finish());

        TextInputLayout acr_rate1 = dialog.findViewById(R.id.acr_rate1);
        TextInputLayout acr_rate2 = dialog.findViewById(R.id.acr_rate2);
        TextInputLayout acr_rate3 = dialog.findViewById(R.id.acr_rate3);
        TextInputLayout acr_rate4 = dialog.findViewById(R.id.acr_rate4);
        TextView acr_add_btn = dialog.findViewById(R.id.acr_add_btn);

        setVisibilityOfTextInputLayout("apr", "jul", acr_rate1, curr_month, notadded_rates);
        setVisibilityOfTextInputLayout("jul", "apr", acr_rate2, curr_month, notadded_rates);
        setVisibilityOfTextInputLayout("oct", "jan", acr_rate3, curr_month, notadded_rates);
        setVisibilityOfTextInputLayout("jan", "oct", acr_rate4, curr_month, notadded_rates);

        String empty_msg = "Enter a base rate !!";
        String nozero_msg = "Please enter a value greater than zero !!";
        acr_add_btn.setOnClickListener(v1 -> {
            String r1_txt = acr_rate1.getEditText().getText().toString();
            String r2_txt = acr_rate2.getEditText().getText().toString();
            String r3_txt = acr_rate3.getEditText().getText().toString();
            String r4_txt = acr_rate4.getEditText().getText().toString();

            if (acr_rate1.getVisibility() == View.VISIBLE && r1_txt.trim().length() <= 0) {
                TextInputLayout[] list = {acr_rate2, acr_rate3, acr_rate4};
                ArrayList<TextInputLayout> arr = new ArrayList<>();
                arr.addAll(Arrays.asList(list));
                updateCompanyRateEdittextErrorEnabled(acr_rate1, arr, empty_msg);
            } else if (acr_rate2.getVisibility() == View.VISIBLE && r2_txt.trim().length() <= 0) {
                TextInputLayout[] list = {acr_rate1, acr_rate3, acr_rate4};
                ArrayList<TextInputLayout> arr = new ArrayList<>();
                arr.addAll(Arrays.asList(list));
                updateCompanyRateEdittextErrorEnabled(acr_rate2, arr, empty_msg);
            } else if (acr_rate3.getVisibility() == View.VISIBLE && r3_txt.trim().length() <= 0) {
                TextInputLayout[] list = {acr_rate1, acr_rate2, acr_rate4};
                ArrayList<TextInputLayout> arr = new ArrayList<>();
                arr.addAll(Arrays.asList(list));
                updateCompanyRateEdittextErrorEnabled(acr_rate3, arr, empty_msg);
            } else if (acr_rate4.getVisibility() == View.VISIBLE && r4_txt.trim().length() <= 0) {
                TextInputLayout[] list = {acr_rate1, acr_rate2, acr_rate3};
                ArrayList<TextInputLayout> arr = new ArrayList<>();
                arr.addAll(Arrays.asList(list));
                updateCompanyRateEdittextErrorEnabled(acr_rate4, arr, empty_msg);
            } else if (acr_rate1.getVisibility() == View.VISIBLE && Integer.parseInt(r1_txt) <= 0) {
                TextInputLayout[] list = {acr_rate2, acr_rate3, acr_rate4};
                ArrayList<TextInputLayout> arr = new ArrayList<>();
                arr.addAll(Arrays.asList(list));
                updateCompanyRateEdittextErrorEnabled(acr_rate1, arr, nozero_msg);
            } else if (acr_rate2.getVisibility() == View.VISIBLE && Integer.parseInt(r2_txt) <= 0) {
                TextInputLayout[] list = {acr_rate1, acr_rate3, acr_rate4};
                ArrayList<TextInputLayout> arr = new ArrayList<>();
                arr.addAll(Arrays.asList(list));
                updateCompanyRateEdittextErrorEnabled(acr_rate2, arr, nozero_msg);
            } else if (acr_rate3.getVisibility() == View.VISIBLE && Integer.parseInt(r3_txt) <= 0) {
                TextInputLayout[] list = {acr_rate1, acr_rate2, acr_rate4};
                ArrayList<TextInputLayout> arr = new ArrayList<>();
                arr.addAll(Arrays.asList(list));
                updateCompanyRateEdittextErrorEnabled(acr_rate3, arr, nozero_msg);
            } else if (acr_rate4.getVisibility() == View.VISIBLE && Integer.parseInt(r4_txt) <= 0) {
                TextInputLayout[] list = {acr_rate1, acr_rate2, acr_rate3};
                ArrayList<TextInputLayout> arr = new ArrayList<>();
                arr.addAll(Arrays.asList(list));
                updateCompanyRateEdittextErrorEnabled(acr_rate4, arr, nozero_msg);
            } else {
                dialog.dismiss();
                Dialog dialog1 = functions.createDialogBox(AnnualReportActivity.this, R.layout.loading_dialog, false);
                dialog1.show();
                Map<String, Object> data = new HashMap<>();
                if (acr_rate1.getVisibility() == View.VISIBLE) {
                    data.put("apr_rate", Long.parseLong(r1_txt));
                    data.put("may_rate", Long.parseLong(r1_txt));
                    data.put("jun_rate", Long.parseLong(r1_txt));
                }
                if (acr_rate2.getVisibility() == View.VISIBLE) {
                    data.put("jul_rate", Long.parseLong(r2_txt));
                    data.put("aug_rate", Long.parseLong(r2_txt));
                    data.put("sep_rate", Long.parseLong(r2_txt));
                }
                if (acr_rate3.getVisibility() == View.VISIBLE) {
                    data.put("oct_rate", Long.parseLong(r3_txt));
                    data.put("nov_rate", Long.parseLong(r3_txt));
                    data.put("dec_rate", Long.parseLong(r3_txt));
                }
                if (acr_rate4.getVisibility() == View.VISIBLE) {
                    data.put("jan_rate", Long.parseLong(r4_txt));
                    data.put("feb_rate", Long.parseLong(r4_txt));
                    data.put("mar_rate", Long.parseLong(r4_txt));
                }
                if (isadd) {
                    data.put("company_reference", db.document(comp_path));
                    data.put("financial_year", financial_year);
                }

                Task<Void> addGovtBaseRateTask = isadd ? db.collection("GovtBaseRate").document().set(data) :
                        db.collection("GovtBaseRate").document(doc.getId()).update(data);

                addGovtBaseRateTask
                        .addOnCompleteListener(task1 -> {
                            Log.e("firebase_error", "Entering....");
                            if (task1.isSuccessful()) {
                                Snackbar.make(annualreport_mainlay, "Govornment Base Rate Added Successfully.", Snackbar.LENGTH_SHORT).show();
                                dialog1.dismiss();
                            } else {
                                dialog1.cancel();
                                String msg = task1.getException().getLocalizedMessage() != null ? task1.getException().getLocalizedMessage() : "No Error !!";
                                Log.e("firebase_error", msg);
                                Snackbar.make(annualreport_mainlay, "Unable to add the Govornment Base Rate !! Please try again", Snackbar.LENGTH_SHORT).show();
                            }
                        });
            }
        });
    }

    private void updateCompanyRateEdittextErrorEnabled(@NonNull TextInputLayout t,
                                                       @NonNull ArrayList<TextInputLayout> arr, String msg) {
        t.setErrorEnabled(true);
        t.setError(msg);
        t.requestFocus();
        for (TextInputLayout item : arr) {
            item.setErrorEnabled(false);
            item.clearFocus();
            item.setError(null);
        }
    }

    private void annualReportInits() {
        annualreport_mainlay = findViewById(R.id.annualreport_mainlay);
        annualreport_generatereport_btn = findViewById(R.id.annualreport_generatereport_btn);
        annualreport_finalrec = findViewById(R.id.annualreport_finalrec);
        annualreport_back_btn = findViewById(R.id.annualreport_back_btn);
        annualreport_calender_btn = findViewById(R.id.annualreport_calender_btn);
        annualreport_calprev_date = findViewById(R.id.annualreport_calprev_date);
        annualreport_calnext_date = findViewById(R.id.annualreport_calnext_date);
        annualreport_curr_date = findViewById(R.id.annualreport_curr_date);

        getData = getIntent();
        firebaseAuth = FirebaseAuth.getInstance();
        firebaseUser = firebaseAuth.getCurrentUser();
        db = FirebaseFirestore.getInstance();
        comp_path = functions.getSharedPrefsValue(getApplicationContext(), "user_data", "company_path", "string", null);
        curr_fin_year = functions.getMonthList().indexOf(functions.getTodayDate("MMM").toLowerCase()) <= 2 ?
                Long.parseLong(functions.getModifiedMonthTodayDate("yyyy", -1)) :
                Long.parseLong(functions.getTodayDate("yyyy"));

        annualreport_curr_date.setText(String.valueOf(curr_fin_year));
        max_fin_year = curr_fin_year;
    }

    private void setVisibilityOfTextInputLayout(String m1, String m2, TextInputLayout r, int curr_month, ArrayList<String> notadded_rates) {
        if (functions.getMonthList().indexOf(m1) <= curr_month && notadded_rates.contains(m1)) {
            r.setVisibility(View.VISIBLE);
            if (!(functions.getMonthList().indexOf(m2) <= curr_month && notadded_rates.contains(m2))) {
                r.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
            }
        } else r.setVisibility(View.GONE);
    }

}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

package com.rushikeshsantoshv.wetrack.Activities;

import android.Manifest;
import android.app.Dialog;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.demogorgorn.monthpicker.MonthPickerDialog;
import com.google.android.gms.tasks.Task;
import com.google.android.material.bottomsheet.BottomSheetDialog;
import com.google.android.material.snackbar.Snackbar;
import com.google.android.material.textfield.TextInputLayout;
import com.google.firebase.Timestamp;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.Query;
import com.karumi.dexter.Dexter;
import com.karumi.dexter.MultiplePermissionsReport;
import com.karumi.dexter.PermissionToken;
import com.karumi.dexter.listener.PermissionRequest;
import com.karumi.dexter.listener.multi.MultiplePermissionsListener;
import com.rushikeshsantoshv.wetrack.Adapters.AnnualReportAdapter;
import com.rushikeshsantoshv.wetrack.DataModels.AnnualReportModel;
import com.rushikeshsantoshv.wetrack.DataModels.Functions;
import com.rushikeshsantoshv.wetrack.R;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnnualReportActivity extends AppCompatActivity {

    TextView annualreport_generatereport_btn;
    RecyclerView annualreport_finalrec;
    ImageButton annualreport_back_btn, annualreport_calender_btn, annualreport_calprev_date, annualreport_calnext_date;
    TextView annualreport_curr_date;
    RelativeLayout annualreport_mainlay;

    FirebaseFirestore db;
    FirebaseAuth firebaseAuth;
    FirebaseUser firebaseUser;
    String comp_path;
    Long curr_fin_year;
    Long min_fin_year;
    Long max_fin_year;
    Timestamp comp_created_year;
    AnnualReportModel model;
    ArrayList<AnnualReportModel> annual_report_arr = new ArrayList<>();

    Intent getData;
    String emp_path;
    long present_count = 0, half_day_count = 0, absent_count = 0;
    private String currMonth="Sample";
    private int daysWorked=0, fullPresentCount=0, halfPresentCount=0;
    private double govtBaseRate =0, compBaseRate= 0;
    private double advancePaid= 0, prevLoanBalance= 0, additionalArrears= 0;

    AnnualReportAdapter annualReportAdapter;
    Functions functions = new Functions();
    File folderDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS + "/WeTrack");

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_annual_report);
        functions.coloredStatusBarDarkTextDesign(AnnualReportActivity.this, R.color.maincolor_light, R.color.white);

        annualReportInits();

        emp_path = (getData != null && getData.getStringExtra("emp_reference_id") != null
                && !getData.getStringExtra("emp_reference_id").equals("")) ?
                getData.getStringExtra("emp_reference_id") : "Employees/sampleuser";

        db.collection("Companies")
                .document(db.document(comp_path).getId())
                .get()
                .addOnCompleteListener(task -> {
                    comp_created_year = (task.isSuccessful()
                            && task.getResult().getTimestamp("company_created") != null ?
                            task.getResult().getTimestamp("company_created") : Timestamp.now());

                    min_fin_year = Long.parseLong(functions.getStringFromDate(comp_created_year.toDate(), "yyyy"));

                    annualreport_calender_btn.setOnClickListener(v -> {
                        MonthPickerDialog.Builder builder = new MonthPickerDialog.Builder(AnnualReportActivity.this,
                                (month, year) -> {
                                    curr_fin_year = (long) year;
                                    annualreport_curr_date.setText(String.valueOf(curr_fin_year));
                                    checkGovtBaseRateAndLoadAnnualReport();
                                }, Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH));

                        builder.setActivatedYear(Integer.parseInt(functions.getTodayDate("yyyy")))
                                .setMinYear(Math.toIntExact(min_fin_year))
                                .setMaxYear(Math.toIntExact(max_fin_year))
                                .showYearOnly()
                                .setTitle("Select Desired Financial Year")
                                .build().show();
                    });
                });

        checkGovtBaseRateAndLoadAnnualReport();

        annualreport_calprev_date.setOnClickListener(v->{
            startActivity(new Intent(getApplicationContext(),SampleActivity.class));
        });

        annualreport_generatereport_btn.setOnClickListener(v -> {
            Dexter.withContext(AnnualReportActivity.this)
                    .withPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_EXTERNAL_STORAGE)
                    .withListener(new MultiplePermissionsListener() {

                        @Override
                        public void onPermissionsChecked(MultiplePermissionsReport multiplePermissionsReport) {
                            try {

                                if (!folderDir.exists()) {
                                    folderDir.mkdirs();
                                }

                                File file = new File(folderDir, "Demo.xls");
                                HSSFWorkbook hssfWorkbook = new HSSFWorkbook();
                                HSSFSheet sheet = hssfWorkbook.createSheet();
                                HSSFRow row = sheet.createRow(0);
                                HSSFCell cell = row.createCell(0);
                                cell.setCellValue("Sample Data");

                                FileOutputStream fileOutputStream = new FileOutputStream(file);
                                hssfWorkbook.write(fileOutputStream);

                                fileOutputStream.flush();
                                fileOutputStream.close();

                            } catch (Exception e) {
                                Log.e("file_error", "The file error is : " + e);
                            }
                        }

                        @Override
                        public void onPermissionRationaleShouldBeShown(List<PermissionRequest> list, PermissionToken permissionToken) {
                            permissionToken.continuePermissionRequest();
                        }
                    }).check();
        });
    }

    private void checkGovtBaseRateAndLoadAnnualReport() {

        model= new AnnualReportModel();
        if(annual_report_arr.size() > 0) annual_report_arr.clear();

        Long financial_year = annualreport_curr_date.getText().equals(functions.getTodayDate("yyyy")) ?
                (functions.getMonthList().indexOf(functions.getTodayDate("MMM").toLowerCase()) <= 2 ?
                        Long.parseLong(functions.getModifiedMonthTodayDate("yyyy", -1)) :
                        Long.parseLong(functions.getTodayDate("yyyy"))) : Long.parseLong(annualreport_curr_date.getText().toString());

        // Long financial_year = 2022L;

        int curr_month = annualreport_curr_date.getText().equals(functions.getTodayDate("yyyy")) ?
                functions.getMonthList().indexOf(functions.getTodayDate("MMM").toLowerCase()) :
                functions.getMonthList().indexOf("mar");
        // int curr_month = functions.getMonthList().indexOf("mar");
        ArrayList<String> notadded_rates = new ArrayList<>();

        db.collection("GovtBaseRate")
                .whereEqualTo("company_reference", db.document(comp_path))
                .whereEqualTo("financial_year", financial_year)
                .get()
                .addOnCompleteListener(task -> {
                    if (task.isSuccessful()) {
                        if (task.getResult().getDocuments().size() > 0) {
                            DocumentSnapshot doc = task.getResult().getDocuments().get(0);
                            boolean check_rate = true;
                            for (int i = 0; i <= curr_month; i++) {
                                if (!doc.contains(functions.getMonthList().get(i) + "_rate")) {
                                    notadded_rates.add(functions.getMonthList().get(i));
                                    check_rate = false;
                                }
                            }

                            if (!check_rate) {
                                addGovtRateToDB(financial_year, curr_month, notadded_rates, doc, false);
                            }

                        } else {
                            Log.e("firebase_error", "The error is : no size");
                            for (int i = 0; i <= curr_month; i++) {
                                notadded_rates.add(functions.getMonthList().get(i));
                            }
                            for (String item : notadded_rates) {
                                Log.e("month_item", "The item is : " + item + " and current month is : " + curr_month);
                            }
                            addGovtRateToDB(financial_year, curr_month, notadded_rates, null, true);
                        }
                    } else {
                        String msg = task.getException() != null && task.getException().getLocalizedMessage() != null ? task.getException().getLocalizedMessage() : "No Error ...";
                        Log.e("firebase_error", "The error is : " + msg);
                    }
                });

        Dialog loading_dialog= functions.createDialogBox(AnnualReportActivity.this, R.layout.loading_dialog,false);
        loading_dialog.show();

        Log.e("user_reference", emp_path);

        Calendar start_calendar = Calendar.getInstance();
        Calendar end_calender = Calendar.getInstance();
        start_calendar.set(Calendar.YEAR, Math.toIntExact(financial_year));
        start_calendar.set(Calendar.MONTH, 3);
        start_calendar.set(Calendar.DAY_OF_MONTH, 1);

        if (financial_year == Long.parseLong(functions.getTodayDate("yyyy")) ||
                financial_year == Long.parseLong(functions.getModifiedYearTodayDate("yyyy", -1))) {
            Log.e("condition_check", "IF Entered...");
            end_calender.set(Calendar.YEAR, financial_year == Long.parseLong(functions.getTodayDate("yyyy")) ?
                    Math.toIntExact(financial_year) : (Math.toIntExact(financial_year) + 1));
            end_calender.set(Calendar.MONTH, financial_year == Long.parseLong(functions.getTodayDate("yyyy")) ?
                    (Integer.parseInt(functions.getTodayDate("MM")) - 2) : 2);
            end_calender.set(Calendar.DAY_OF_MONTH, end_calender.getActualMaximum(Calendar.DAY_OF_MONTH));
        }
        else {
            Log.e("condition_check", "ELSE Entered...");
            end_calender.set(Calendar.YEAR, Math.toIntExact(financial_year) + 1);
            end_calender.set(Calendar.MONTH, 2);
            end_calender.set(Calendar.DAY_OF_MONTH, end_calender.getActualMaximum(Calendar.DAY_OF_MONTH));
        }

        /*Log.e("timestamp", "The start timestamp is : " + functions.getStringFromDate(
                start_calendar.getTime(), "dd/MM/yyyy") + " & end timestamp is : " + functions.getStringFromDate(
                end_calender.getTime(), "dd/MM/yyyy") + " and total months are : ");*/

        for (int i = 0; i <= functions.getTotalNoOfMonths(start_calendar, end_calender); i++) {

            int looped_year= (i >= 9) ? start_calendar.get(Calendar.YEAR)+1 : start_calendar.get(Calendar.YEAR);
            Calendar c1 = Calendar.getInstance();
            c1.set(Calendar.DAY_OF_MONTH, 1);
            c1.set(Calendar.MONTH, functions.getThreeLetterMonths().indexOf(functions.getMonthList().get(i)));
            c1.set(Calendar.YEAR, looped_year);
            Timestamp t1 = new Timestamp(functions.getDateFromString(functions.getStringFromDate(c1.getTime(), "dd/MM/yyyy"), "dd/MM/yyyy"));

            Calendar c2 = Calendar.getInstance();
            c2.set(Calendar.DAY_OF_MONTH, c1.getActualMaximum(Calendar.DAY_OF_MONTH));
            c2.set(Calendar.MONTH, c1.get(Calendar.MONTH));
            c2.set(Calendar.YEAR, c1.get(Calendar.YEAR));
            Timestamp t2 = new Timestamp(functions.getDateFromString(functions.getStringFromDate(c2.getTime(), "dd/MM/yyyy"), "dd/MM/yyyy"));

            int i1 = i;

            /*Log.e("each_month","The current start date is : "+functions.getStringFromDate(t1.toDate(),"dd/MM/yyyy") +
                    " and the end date is : "+functions.getStringFromDate(t2.toDate(),"dd/MM/yyyy"));*/

            db.collection("Attendances")
                    .orderBy("attend_date", Query.Direction.DESCENDING)
                    .whereEqualTo("attend_emp_reference", db.document(emp_path))
                    .whereGreaterThanOrEqualTo("attend_date", t1)
                    .whereLessThanOrEqualTo("attend_date", t2)
                    .get()
                    .addOnCompleteListener(task2 -> {
                        if (task2.isSuccessful()) {
                            if (task2.getResult().getDocuments().size() > 0) {
                                List<DocumentSnapshot> attendance_arr = task2.getResult().getDocuments();

                                currMonth="Sample";
                                daysWorked=0;
                                fullPresentCount=0;
                                halfPresentCount=0;
                                govtBaseRate =0;
                                compBaseRate= 0;
                                advancePaid= 0;
                                prevLoanBalance= 0;
                                additionalArrears= 0;
                                present_count = 0;
                                half_day_count = 0;
                                absent_count = 0;

                                for (DocumentSnapshot attendance : attendance_arr) {
                                    present_count += (attendance.getLong("attend_status") == 1) ? 1 : 0;
                                    half_day_count += (attendance.getLong("attend_status") == 2) ? 1 : 0;
                                    absent_count += (attendance.getLong("attend_status") == 3) ? 1 : 0;
                                }
                                fullPresentCount = Math.toIntExact(present_count);
                                halfPresentCount = Math.toIntExact(half_day_count);
                                daysWorked = fullPresentCount + halfPresentCount;
                                Log.e("each_attendances","The attendance count is : "+daysWorked);
                                Calendar currCalender = Calendar.getInstance();
                                currCalender.setTime(t1.toDate());
                                currMonth = functions.getMonthFullName(functions.getThreeLetterMonths().indexOf(functions.getMonthList().get(i1)));

                                db.collection("Payments")
                                        .orderBy("pemp_timestamp", Query.Direction.DESCENDING)
                                        .whereEqualTo("pemp_emp_reference", db.document(emp_path))
                                        .whereGreaterThanOrEqualTo("pemp_timestamp", t1)
                                        .whereLessThanOrEqualTo("pemp_timestamp", t2)
                                        .get()
                                        .addOnCompleteListener(task3 -> {
                                            if (task3.isSuccessful()) {
                                                if (task3.getResult().getDocuments().size() > 0) {
                                                    Log.e("data", "The company base rate of "+currMonth+" is : " + task3.getResult().getDocuments().get(0).getLong("pemp_base_rate"));
                                                    db.collection("GovtBaseRate")
                                                            .whereEqualTo("company_reference", db.document(comp_path))
                                                            .whereEqualTo("financial_year", financial_year)
                                                            .get()
                                                            .addOnCompleteListener(task4 -> {
                                                                if(task4.isSuccessful()){
                                                                    if(task4.getResult().getDocuments().size() > 0){
                                                                        model= new AnnualReportModel(currMonth,daysWorked,fullPresentCount, halfPresentCount,
                                                                                govtBaseRate,compBaseRate, advancePaid, prevLoanBalance, additionalArrears);
                                                                        annual_report_arr.add(model);
                                                                        loading_dialog.dismiss();
                                                                    }
                                                                    else{
                                                                        Log.e("res_error","04 Array No Size");
                                                                    }
                                                                }
                                                                else{
                                                                    String msg= task4.getException()!=null && task4.getException().getLocalizedMessage()!=null ? task4.getException().getLocalizedMessage() : "No Error !!";
                                                                    Log.e("firebase_error","04 Error is : "+msg);
                                                                    loading_dialog.cancel();
                                                                }
                                                            });
                                                }
                                                else {
                                                    Log.e("res_error", "02 Array No Size");
                                                }
                                            }
                                            else {
                                                String msg= task3.getException()!=null && task3.getException().getLocalizedMessage()!=null ? task3.getException().getLocalizedMessage() : "No Error !!";
                                                Log.e("firebase_error","03 Error is : "+msg);
                                                loading_dialog.cancel();
                                            }
                                        });
                            }
                            else{
                                Log.e("res_error","02 Array No Size");
                            }
                        }
                        else {
                            String msg= task2.getException()!=null && task2.getException().getLocalizedMessage()!=null ? task2.getException().getLocalizedMessage() : "No Error !!";
                            Log.e("firebase_error","02 Error is : "+msg);
                            loading_dialog.cancel();
                        }
                    });
        }

        new Handler().postDelayed(() -> {
            annualReportAdapter = new AnnualReportAdapter(getApplicationContext(),annual_report_arr);
            annualreport_finalrec.setLayoutManager(new LinearLayoutManager(getApplicationContext()));
            annualreport_finalrec.setAdapter(annualReportAdapter);
            annualReportAdapter.notifyDataSetChanged();
        },4000);
    }

    private void addGovtRateToDB(Long financial_year, int curr_month, ArrayList<String> notadded_rates, DocumentSnapshot doc, boolean isadd) {
        BottomSheetDialog dialog = new BottomSheetDialog(AnnualReportActivity.this, R.style.BottomSheetTheme);
        dialog.setContentView(R.layout.add_company_rate_btmdialog);
        dialog.setCanceledOnTouchOutside(false);
        dialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
        dialog.show();

        dialog.setOnCancelListener(dialogInterface -> finish());

        TextInputLayout acr_rate1 = dialog.findViewById(R.id.acr_rate1);
        TextInputLayout acr_rate2 = dialog.findViewById(R.id.acr_rate2);
        TextInputLayout acr_rate3 = dialog.findViewById(R.id.acr_rate3);
        TextInputLayout acr_rate4 = dialog.findViewById(R.id.acr_rate4);
        TextView acr_add_btn = dialog.findViewById(R.id.acr_add_btn);

        setVisibilityOfTextInputLayout("apr", "jul", acr_rate1, curr_month, notadded_rates);
        setVisibilityOfTextInputLayout("jul", "apr", acr_rate2, curr_month, notadded_rates);
        setVisibilityOfTextInputLayout("oct", "jan", acr_rate3, curr_month, notadded_rates);
        setVisibilityOfTextInputLayout("jan", "oct", acr_rate4, curr_month, notadded_rates);

        String empty_msg = "Enter a base rate !!";
        String nozero_msg = "Please enter a value greater than zero !!";
        acr_add_btn.setOnClickListener(v1 -> {
            String r1_txt = acr_rate1.getEditText().getText().toString();
            String r2_txt = acr_rate2.getEditText().getText().toString();
            String r3_txt = acr_rate3.getEditText().getText().toString();
            String r4_txt = acr_rate4.getEditText().getText().toString();

            if (acr_rate1.getVisibility() == View.VISIBLE && r1_txt.trim().length() <= 0) {
                TextInputLayout[] list = {acr_rate2, acr_rate3, acr_rate4};
                ArrayList<TextInputLayout> arr = new ArrayList<>();
                arr.addAll(Arrays.asList(list));
                updateCompanyRateEdittextErrorEnabled(acr_rate1, arr, empty_msg);
            } else if (acr_rate2.getVisibility() == View.VISIBLE && r2_txt.trim().length() <= 0) {
                TextInputLayout[] list = {acr_rate1, acr_rate3, acr_rate4};
                ArrayList<TextInputLayout> arr = new ArrayList<>();
                arr.addAll(Arrays.asList(list));
                updateCompanyRateEdittextErrorEnabled(acr_rate2, arr, empty_msg);
            } else if (acr_rate3.getVisibility() == View.VISIBLE && r3_txt.trim().length() <= 0) {
                TextInputLayout[] list = {acr_rate1, acr_rate2, acr_rate4};
                ArrayList<TextInputLayout> arr = new ArrayList<>();
                arr.addAll(Arrays.asList(list));
                updateCompanyRateEdittextErrorEnabled(acr_rate3, arr, empty_msg);
            } else if (acr_rate4.getVisibility() == View.VISIBLE && r4_txt.trim().length() <= 0) {
                TextInputLayout[] list = {acr_rate1, acr_rate2, acr_rate3};
                ArrayList<TextInputLayout> arr = new ArrayList<>();
                arr.addAll(Arrays.asList(list));
                updateCompanyRateEdittextErrorEnabled(acr_rate4, arr, empty_msg);
            } else if (acr_rate1.getVisibility() == View.VISIBLE && Integer.parseInt(r1_txt) <= 0) {
                TextInputLayout[] list = {acr_rate2, acr_rate3, acr_rate4};
                ArrayList<TextInputLayout> arr = new ArrayList<>();
                arr.addAll(Arrays.asList(list));
                updateCompanyRateEdittextErrorEnabled(acr_rate1, arr, nozero_msg);
            } else if (acr_rate2.getVisibility() == View.VISIBLE && Integer.parseInt(r2_txt) <= 0) {
                TextInputLayout[] list = {acr_rate1, acr_rate3, acr_rate4};
                ArrayList<TextInputLayout> arr = new ArrayList<>();
                arr.addAll(Arrays.asList(list));
                updateCompanyRateEdittextErrorEnabled(acr_rate2, arr, nozero_msg);
            } else if (acr_rate3.getVisibility() == View.VISIBLE && Integer.parseInt(r3_txt) <= 0) {
                TextInputLayout[] list = {acr_rate1, acr_rate2, acr_rate4};
                ArrayList<TextInputLayout> arr = new ArrayList<>();
                arr.addAll(Arrays.asList(list));
                updateCompanyRateEdittextErrorEnabled(acr_rate3, arr, nozero_msg);
            } else if (acr_rate4.getVisibility() == View.VISIBLE && Integer.parseInt(r4_txt) <= 0) {
                TextInputLayout[] list = {acr_rate1, acr_rate2, acr_rate3};
                ArrayList<TextInputLayout> arr = new ArrayList<>();
                arr.addAll(Arrays.asList(list));
                updateCompanyRateEdittextErrorEnabled(acr_rate4, arr, nozero_msg);
            } else {
                dialog.dismiss();
                Dialog dialog1 = functions.createDialogBox(AnnualReportActivity.this, R.layout.loading_dialog, false);
                dialog1.show();
                Map<String, Object> data = new HashMap<>();
                if (acr_rate1.getVisibility() == View.VISIBLE) {
                    data.put("apr_rate", Long.parseLong(r1_txt));
                    data.put("may_rate", Long.parseLong(r1_txt));
                    data.put("jun_rate", Long.parseLong(r1_txt));
                }
                if (acr_rate2.getVisibility() == View.VISIBLE) {
                    data.put("jul_rate", Long.parseLong(r2_txt));
                    data.put("aug_rate", Long.parseLong(r2_txt));
                    data.put("sep_rate", Long.parseLong(r2_txt));
                }
                if (acr_rate3.getVisibility() == View.VISIBLE) {
                    data.put("oct_rate", Long.parseLong(r3_txt));
                    data.put("nov_rate", Long.parseLong(r3_txt));
                    data.put("dec_rate", Long.parseLong(r3_txt));
                }
                if (acr_rate4.getVisibility() == View.VISIBLE) {
                    data.put("jan_rate", Long.parseLong(r4_txt));
                    data.put("feb_rate", Long.parseLong(r4_txt));
                    data.put("mar_rate", Long.parseLong(r4_txt));
                }
                if (isadd) {
                    data.put("company_reference", db.document(comp_path));
                    data.put("financial_year", financial_year);
                }

                Task<Void> addGovtBaseRateTask = isadd ? db.collection("GovtBaseRate").document().set(data) :
                        db.collection("GovtBaseRate").document(doc.getId()).update(data);

                addGovtBaseRateTask
                        .addOnCompleteListener(task1 -> {
                            Log.e("firebase_error", "Entering....");
                            if (task1.isSuccessful()) {
                                Snackbar.make(annualreport_mainlay, "Govornment Base Rate Added Successfully.", Snackbar.LENGTH_SHORT).show();
                                dialog1.dismiss();
                            } else {
                                dialog1.cancel();
                                String msg = task1.getException().getLocalizedMessage() != null ? task1.getException().getLocalizedMessage() : "No Error !!";
                                Log.e("firebase_error", msg);
                                Snackbar.make(annualreport_mainlay, "Unable to add the Govornment Base Rate !! Please try again", Snackbar.LENGTH_SHORT).show();
                            }
                        });
            }
        });
    }

    private void updateCompanyRateEdittextErrorEnabled(@NonNull TextInputLayout t,
                                                       @NonNull ArrayList<TextInputLayout> arr, String msg) {
        t.setErrorEnabled(true);
        t.setError(msg);
        t.requestFocus();
        for (TextInputLayout item : arr) {
            item.setErrorEnabled(false);
            item.clearFocus();
            item.setError(null);
        }
    }

    private void annualReportInits() {
        annualreport_mainlay = findViewById(R.id.annualreport_mainlay);
        annualreport_generatereport_btn = findViewById(R.id.annualreport_generatereport_btn);
        annualreport_finalrec = findViewById(R.id.annualreport_finalrec);
        annualreport_back_btn = findViewById(R.id.annualreport_back_btn);
        annualreport_calender_btn = findViewById(R.id.annualreport_calender_btn);
        annualreport_calprev_date = findViewById(R.id.annualreport_calprev_date);
        annualreport_calnext_date = findViewById(R.id.annualreport_calnext_date);
        annualreport_curr_date = findViewById(R.id.annualreport_curr_date);

        getData = getIntent();
        firebaseAuth = FirebaseAuth.getInstance();
        firebaseUser = firebaseAuth.getCurrentUser();
        db = FirebaseFirestore.getInstance();
        comp_path = functions.getSharedPrefsValue(getApplicationContext(), "user_data", "company_path", "string", null);
        curr_fin_year = functions.getMonthList().indexOf(functions.getTodayDate("MMM").toLowerCase()) <= 2 ?
                Long.parseLong(functions.getModifiedMonthTodayDate("yyyy", -1)) :
                Long.parseLong(functions.getTodayDate("yyyy"));

        annualreport_curr_date.setText(String.valueOf(curr_fin_year));
        max_fin_year = curr_fin_year;
    }

    private void setVisibilityOfTextInputLayout(String m1, String m2, TextInputLayout r, int curr_month, ArrayList<String> notadded_rates) {
        if (functions.getMonthList().indexOf(m1) <= curr_month && notadded_rates.contains(m1)) {
            r.setVisibility(View.VISIBLE);
            if (!(functions.getMonthList().indexOf(m2) <= curr_month && notadded_rates.contains(m2))) {
                r.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
            }
        } else r.setVisibility(View.GONE);
    }

}

====================================================================================

<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:id="@+id/annualreport_mainlay"
    tools:context=".Activities.AnnualReportActivity">

    <androidx.appcompat.widget.Toolbar
        android:id="@+id/annualreport_toolbar"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:background="@color/maincolor_light">

        <RelativeLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content">

            <ImageButton
                android:id="@+id/annualreport_back_btn"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:background="@color/transparent"
                android:foreground="?attr/selectableItemBackground"
                android:padding="5dp"
                android:src="@drawable/ic_arrow_back" />

            <TextView
                android:id="@+id/annualreport_title"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_centerVertical="true"
                android:layout_marginStart="20dp"
                android:layout_marginEnd="10dp"
                android:layout_toEndOf="@+id/annualreport_back_btn"
                android:text="Annual Report"
                android:textColor="@color/black"
                android:textSize="17sp"
                android:textStyle="bold" />

        </RelativeLayout>
    </androidx.appcompat.widget.Toolbar>

    <androidx.core.widget.NestedScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_above="@+id/annualreport_generatereport_btn"
        android:layout_below="@+id/annualreport_toolbar">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:orientation="vertical">

            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:background="@color/maincolor_light"
                android:orientation="vertical"
                android:padding="10dp">

                <LinearLayout
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_gravity="center"
                    android:background="@drawable/curve_border"
                    android:backgroundTint="#B0FFFFFF"
                    android:gravity="center"
                    android:orientation="horizontal"
                    android:padding="10dp">

                    <ImageButton
                        android:id="@+id/annualreport_calender_btn"
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:background="@drawable/mini_curve_border"
                        android:backgroundTint="@color/white"
                        android:foreground="?attr/selectableItemBackground"
                        android:padding="7dp"
                        android:src="@drawable/ic_calendar"
                        app:tint="#6A6A6A" />

                    <ImageButton
                        android:id="@+id/annualreport_calprev_date"
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:layout_marginStart="5dp"
                        android:background="@color/transparent"
                        android:foreground="?attr/selectableItemBackground"
                        android:padding="5dp"
                        android:src="@drawable/ic_date_back"
                        app:tint="@color/light_black" />

                    <TextView
                        android:id="@+id/annualreport_curr_date"
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:fontFamily="@font/poppins"
                        android:foreground="?attr/selectableItemBackground"
                        android:includeFontPadding="false"
                        android:textColor="@color/light_black"
                        android:textStyle="bold" />

                    <ImageButton
                        android:id="@+id/annualreport_calnext_date"
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:layout_marginStart="5dp"
                        android:background="@color/transparent"
                        android:foreground="?attr/selectableItemBackground"
                        android:padding="5dp"
                        android:src="@drawable/ic_date_forward"
                        app:tint="@color/light_black" />
                </LinearLayout>

            </LinearLayout>

            <androidx.recyclerview.widget.RecyclerView
                android:id="@+id/annualreport_finalrec"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:layout_marginTop="10dp"
                tools:listitem="@layout/annual_report_item"/>

        </LinearLayout>

    </androidx.core.widget.NestedScrollView>

    <TextView
        android:id="@+id/annualreport_generatereport_btn"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_margin="10dp"
        android:background="@drawable/mini_curve_border"
        android:foreground="?attr/selectableItemBackground"
        android:backgroundTint="@color/maincolor"
        android:fontFamily="@font/poppins"
        android:paddingVertical="7dp"
        android:textSize="13sp"
        android:includeFontPadding="false"
        android:text="Generate Annual Report"
        android:textAlignment="center"
        android:textAllCaps="false"
        android:textColor="@color/white"
        android:textStyle="bold" />

</RelativeLayout>


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

package com.rushikeshsantoshv.wetrack.Activities;

import android.Manifest;
import android.app.Dialog;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.demogorgorn.monthpicker.MonthPickerDialog;
import com.google.android.gms.tasks.Task;
import com.google.android.material.bottomsheet.BottomSheetDialog;
import com.google.android.material.snackbar.Snackbar;
import com.google.android.material.textfield.TextInputLayout;
import com.google.firebase.Timestamp;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.Query;
import com.karumi.dexter.Dexter;
import com.karumi.dexter.MultiplePermissionsReport;
import com.karumi.dexter.PermissionToken;
import com.karumi.dexter.listener.PermissionRequest;
import com.karumi.dexter.listener.multi.MultiplePermissionsListener;
import com.rushikeshsantoshv.wetrack.Adapters.AnnualReportAdapter;
import com.rushikeshsantoshv.wetrack.DataModels.AnnualReportModel;
import com.rushikeshsantoshv.wetrack.DataModels.Functions;
import com.rushikeshsantoshv.wetrack.R;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnnualReportActivity extends AppCompatActivity {

    TextView annualreport_generatereport_btn;
    RecyclerView annualreport_finalrec;
    ImageButton annualreport_back_btn, annualreport_calender_btn, annualreport_calprev_date, annualreport_calnext_date;
    TextView annualreport_curr_date;
    RelativeLayout annualreport_mainlay;

    FirebaseFirestore db;
    FirebaseAuth firebaseAuth;
    FirebaseUser firebaseUser;
    String comp_path;
    Long curr_fin_year;
    Long min_fin_year;
    Long max_fin_year;
    Timestamp comp_created_year;
    AnnualReportModel model;
    ArrayList<AnnualReportModel> annual_report_arr = new ArrayList<>();

    Intent getData;
    String emp_path;
    long present_count = 0, half_day_count = 0, absent_count = 0;
    private String currMonth1="April";
    private int daysWorked1=0, fullPresentCount1=0, halfPresentCount1=0;
    private double govtBaseRate1 =0, compBaseRate1= 0;
    private double advancePaid1= 0, prevLoanBalance1= 0, additionalArrears1= 0;

    private String currMonth2="May";
    private int daysWorked2=0, fullPresentCount2=0, halfPresentCount2=0;
    private double govtBaseRate2 =0, compBaseRate2= 0;
    private double advancePaid2= 0, prevLoanBalance2= 0, additionalArrears2= 0;

    private String currMonth3="June";
    private int daysWorked3=0, fullPresentCount3=0, halfPresentCount3=0;
    private double govtBaseRate3 =0, compBaseRate3= 0;
    private double advancePaid3= 0, prevLoanBalance3= 0, additionalArrears3= 0;

    private String currMonth4="July";
    private int daysWorked4=0, fullPresentCount4=0, halfPresentCount4=0;
    private double govtBaseRate4 =0, compBaseRate4= 0;
    private double advancePaid4= 0, prevLoanBalance4= 0, additionalArrears4= 0;

    private String currMonth5="August";
    private int daysWorked5=0, fullPresentCount5=0, halfPresentCount5=0;
    private double govtBaseRate5 =0, compBaseRate5= 0;
    private double advancePaid5= 0, prevLoanBalance5= 0, additionalArrears5= 0;

    private String currMonth6="September";
    private int daysWorked6=0, fullPresentCount6=0, halfPresentCount6=0;
    private double govtBaseRate6 =0, compBaseRate6= 0;
    private double advancePaid6= 0, prevLoanBalance6= 0, additionalArrears6= 0;

    private String currMonth7="October";
    private int daysWorked7=0, fullPresentCount7=0, halfPresentCount7=0;
    private double govtBaseRate7 =0, compBaseRate7= 0;
    private double advancePaid7= 0, prevLoanBalance7= 0, additionalArrears7= 0;

    private String currMonth8="November";
    private int daysWorked8=0, fullPresentCount8=0, halfPresentCount8=0;
    private double govtBaseRate8 =0, compBaseRate8= 0;
    private double advancePaid8= 0, prevLoanBalance8= 0, additionalArrears8= 0;

    private String currMonth9="December";
    private int daysWorked9=0, fullPresentCount9=0, halfPresentCount9=0;
    private double govtBaseRate9 =0, compBaseRate9= 0;
    private double advancePaid9= 0, prevLoanBalance9= 0, additionalArrears9= 0;

    private String currMonth10="January";
    private int daysWorked10=0, fullPresentCount10=0, halfPresentCount10=0;
    private double govtBaseRate10 =0, compBaseRate10= 0;
    private double advancePaid10= 0, prevLoanBalance10= 0, additionalArrears10= 0;

    private String currMonth11="February";
    private int daysWorked11=0, fullPresentCount11=0, halfPresentCount11=0;
    private double govtBaseRate11 =0, compBaseRate11= 0;
    private double advancePaid11= 0, prevLoanBalance11= 0, additionalArrears11= 0;

    private String currMonth12="March";
    private int daysWorked12=0, fullPresentCount12=0, halfPresentCount12=0;
    private double govtBaseRate12 =0, compBaseRate12= 0;
    private double advancePaid12= 0, prevLoanBalance12= 0, additionalArrears12= 0;

    AnnualReportAdapter annualReportAdapter;
    Functions functions = new Functions();
    File folderDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS + "/WeTrack");

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_annual_report);
        functions.coloredStatusBarDarkTextDesign(AnnualReportActivity.this, R.color.maincolor_light, R.color.white);

        annualReportInits();

        emp_path = (getData != null && getData.getStringExtra("emp_reference_id") != null
                && !getData.getStringExtra("emp_reference_id").equals("")) ?
                getData.getStringExtra("emp_reference_id") : "Employees/sampleuser";

        db.collection("Companies")
                .document(db.document(comp_path).getId())
                .get()
                .addOnCompleteListener(task -> {
                    comp_created_year = (task.isSuccessful()
                            && task.getResult().getTimestamp("company_created") != null ?
                            task.getResult().getTimestamp("company_created") : Timestamp.now());

                    min_fin_year = Long.parseLong(functions.getStringFromDate(comp_created_year.toDate(), "yyyy"));

                    annualreport_calender_btn.setOnClickListener(v -> {
                        MonthPickerDialog.Builder builder = new MonthPickerDialog.Builder(AnnualReportActivity.this,
                                (month, year) -> {
                                    curr_fin_year = (long) year;
                                    annualreport_curr_date.setText(String.valueOf(curr_fin_year));
                                    checkGovtBaseRateAndLoadAnnualReport();
                                }, Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH));

                        builder.setActivatedYear(Integer.parseInt(functions.getTodayDate("yyyy")))
                                .setMinYear(Math.toIntExact(min_fin_year))
                                .setMaxYear(Math.toIntExact(max_fin_year))
                                .showYearOnly()
                                .setTitle("Select Desired Financial Year")
                                .build().show();
                    });
                });

        checkGovtBaseRateAndLoadAnnualReport();

        annualreport_calprev_date.setOnClickListener(v->{
            startActivity(new Intent(getApplicationContext(),SampleActivity.class));
        });

        annualreport_generatereport_btn.setOnClickListener(v -> {
            Dexter.withContext(AnnualReportActivity.this)
                    .withPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_EXTERNAL_STORAGE)
                    .withListener(new MultiplePermissionsListener() {

                        @Override
                        public void onPermissionsChecked(MultiplePermissionsReport multiplePermissionsReport) {
                            try {

                                if (!folderDir.exists()) {
                                    folderDir.mkdirs();
                                }

                                File file = new File(folderDir, "Demo.xls");
                                HSSFWorkbook hssfWorkbook = new HSSFWorkbook();
                                HSSFSheet sheet = hssfWorkbook.createSheet();
                                HSSFRow row = sheet.createRow(0);
                                HSSFCell cell = row.createCell(0);
                                cell.setCellValue("Sample Data");

                                FileOutputStream fileOutputStream = new FileOutputStream(file);
                                hssfWorkbook.write(fileOutputStream);

                                fileOutputStream.flush();
                                fileOutputStream.close();

                            } catch (Exception e) {
                                Log.e("file_error", "The file error is : " + e);
                            }
                        }

                        @Override
                        public void onPermissionRationaleShouldBeShown(List<PermissionRequest> list, PermissionToken permissionToken) {
                            permissionToken.continuePermissionRequest();
                        }
                    }).check();
        });
    }

    private void checkGovtBaseRateAndLoadAnnualReport() {

        model= new AnnualReportModel();
        if(annual_report_arr.size() > 0) annual_report_arr.clear();

        Long financial_year = annualreport_curr_date.getText().equals(functions.getTodayDate("yyyy")) ?
                (functions.getMonthList().indexOf(functions.getTodayDate("MMM").toLowerCase()) <= 2 ?
                        Long.parseLong(functions.getModifiedMonthTodayDate("yyyy", -1)) :
                        Long.parseLong(functions.getTodayDate("yyyy"))) : Long.parseLong(annualreport_curr_date.getText().toString());

        // Long financial_year = 2022L;

        int curr_month = annualreport_curr_date.getText().equals(functions.getTodayDate("yyyy")) ?
                functions.getMonthList().indexOf(functions.getTodayDate("MMM").toLowerCase()) :
                functions.getMonthList().indexOf("mar");
        // int curr_month = functions.getMonthList().indexOf("mar");
        ArrayList<String> notadded_rates = new ArrayList<>();

        db.collection("GovtBaseRate")
                .whereEqualTo("company_reference", db.document(comp_path))
                .whereEqualTo("financial_year", financial_year)
                .get()
                .addOnCompleteListener(task -> {
                    if (task.isSuccessful()) {
                        if (task.getResult().getDocuments().size() > 0) {
                            DocumentSnapshot doc = task.getResult().getDocuments().get(0);
                            boolean check_rate = true;
                            for (int i = 0; i <= curr_month; i++) {
                                if (!doc.contains(functions.getMonthList().get(i) + "_rate")) {
                                    notadded_rates.add(functions.getMonthList().get(i));
                                    check_rate = false;
                                }
                            }

                            if (!check_rate) {
                                addGovtRateToDB(financial_year, curr_month, notadded_rates, doc, false);
                            }

                        } else {
                            Log.e("firebase_error", "The error is : no size");
                            for (int i = 0; i <= curr_month; i++) {
                                notadded_rates.add(functions.getMonthList().get(i));
                            }
                            for (String item : notadded_rates) {
                                Log.e("month_item", "The item is : " + item + " and current month is : " + curr_month);
                            }
                            addGovtRateToDB(financial_year, curr_month, notadded_rates, null, true);
                        }
                    } else {
                        String msg = task.getException() != null && task.getException().getLocalizedMessage() != null ? task.getException().getLocalizedMessage() : "No Error ...";
                        Log.e("firebase_error", "The error is : " + msg);
                    }
                });

        Dialog loading_dialog= functions.createDialogBox(AnnualReportActivity.this, R.layout.loading_dialog,false);
        loading_dialog.show();

        Log.e("user_reference", emp_path);

        Calendar start_calendar = Calendar.getInstance();
        Calendar end_calender = Calendar.getInstance();
        start_calendar.set(Calendar.YEAR, Math.toIntExact(financial_year));
        start_calendar.set(Calendar.MONTH, 3);
        start_calendar.set(Calendar.DAY_OF_MONTH, 1);

        if (financial_year == Long.parseLong(functions.getTodayDate("yyyy")) ||
                financial_year == Long.parseLong(functions.getModifiedYearTodayDate("yyyy", -1))) {
            Log.e("condition_check", "IF Entered...");
            end_calender.set(Calendar.YEAR, financial_year == Long.parseLong(functions.getTodayDate("yyyy")) ?
                    Math.toIntExact(financial_year) : (Math.toIntExact(financial_year) + 1));
            end_calender.set(Calendar.MONTH, financial_year == Long.parseLong(functions.getTodayDate("yyyy")) ?
                    (Integer.parseInt(functions.getTodayDate("MM")) - 2) : 2);
            end_calender.set(Calendar.DAY_OF_MONTH, end_calender.getActualMaximum(Calendar.DAY_OF_MONTH));
        }
        else {
            Log.e("condition_check", "ELSE Entered...");
            end_calender.set(Calendar.YEAR, Math.toIntExact(financial_year) + 1);
            end_calender.set(Calendar.MONTH, 2);
            end_calender.set(Calendar.DAY_OF_MONTH, end_calender.getActualMaximum(Calendar.DAY_OF_MONTH));
        }

        /*Log.e("timestamp", "The start timestamp is : " + functions.getStringFromDate(
                start_calendar.getTime(), "dd/MM/yyyy") + " & end timestamp is : " + functions.getStringFromDate(
                end_calender.getTime(), "dd/MM/yyyy") + " and total months are : ");*/

        for (int i = 0; i <= functions.getTotalNoOfMonths(start_calendar, end_calender); i++) {

            int looped_year= (i >= 9) ? start_calendar.get(Calendar.YEAR)+1 : start_calendar.get(Calendar.YEAR);
            Calendar c1 = Calendar.getInstance();
            c1.set(Calendar.DAY_OF_MONTH, 1);
            c1.set(Calendar.MONTH, functions.getThreeLetterMonths().indexOf(functions.getMonthList().get(i)));
            c1.set(Calendar.YEAR, looped_year);
            Timestamp t1 = new Timestamp(functions.getDateFromString(functions.getStringFromDate(c1.getTime(), "dd/MM/yyyy"), "dd/MM/yyyy"));

            Calendar c2 = Calendar.getInstance();
            c2.set(Calendar.DAY_OF_MONTH, c1.getActualMaximum(Calendar.DAY_OF_MONTH));
            c2.set(Calendar.MONTH, c1.get(Calendar.MONTH));
            c2.set(Calendar.YEAR, c1.get(Calendar.YEAR));
            Timestamp t2 = new Timestamp(functions.getDateFromString(functions.getStringFromDate(c2.getTime(), "dd/MM/yyyy"), "dd/MM/yyyy"));

            int i1 = i;

            /*Log.e("each_month","The current start date is : "+functions.getStringFromDate(t1.toDate(),"dd/MM/yyyy") +
                    " and the end date is : "+functions.getStringFromDate(t2.toDate(),"dd/MM/yyyy"));*/

            db.collection("Attendances")
                    .orderBy("attend_date", Query.Direction.DESCENDING)
                    .whereEqualTo("attend_emp_reference", db.document(emp_path))
                    .whereGreaterThanOrEqualTo("attend_date", t1)
                    .whereLessThanOrEqualTo("attend_date", t2)
                    .get()
                    .addOnCompleteListener(task2 -> {
                        if (task2.isSuccessful()) {
                            if (task2.getResult().getDocuments().size() > 0) {
                                List<DocumentSnapshot> attendance_arr = task2.getResult().getDocuments();

                                currMonth="Sample";
                                daysWorked=0;
                                fullPresentCount=0;
                                halfPresentCount=0;
                                govtBaseRate =0;
                                compBaseRate= 0;
                                advancePaid= 0;
                                prevLoanBalance= 0;
                                additionalArrears= 0;
                                present_count = 0;
                                half_day_count = 0;
                                absent_count = 0;

                                for (DocumentSnapshot attendance : attendance_arr) {
                                    present_count += (attendance.getLong("attend_status") == 1) ? 1 : 0;
                                    half_day_count += (attendance.getLong("attend_status") == 2) ? 1 : 0;
                                    absent_count += (attendance.getLong("attend_status") == 3) ? 1 : 0;
                                }
                                fullPresentCount = Math.toIntExact(present_count);
                                halfPresentCount = Math.toIntExact(half_day_count);
                                daysWorked = fullPresentCount + halfPresentCount;
                                Log.e("each_attendances","The attendance count is : "+daysWorked);
                                Calendar currCalender = Calendar.getInstance();
                                currCalender.setTime(t1.toDate());
                                currMonth = functions.getMonthFullName(functions.getThreeLetterMonths().indexOf(functions.getMonthList().get(i1)));

                                db.collection("Payments")
                                        .orderBy("pemp_timestamp", Query.Direction.DESCENDING)
                                        .whereEqualTo("pemp_emp_reference", db.document(emp_path))
                                        .whereGreaterThanOrEqualTo("pemp_timestamp", t1)
                                        .whereLessThanOrEqualTo("pemp_timestamp", t2)
                                        .get()
                                        .addOnCompleteListener(task3 -> {
                                            if (task3.isSuccessful()) {
                                                if (task3.getResult().getDocuments().size() > 0) {
                                                    Log.e("data", "The company base rate of "+currMonth+" is : " + task3.getResult().getDocuments().get(0).getLong("pemp_base_rate"));
                                                    db.collection("GovtBaseRate")
                                                            .whereEqualTo("company_reference", db.document(comp_path))
                                                            .whereEqualTo("financial_year", financial_year)
                                                            .get()
                                                            .addOnCompleteListener(task4 -> {
                                                                if(task4.isSuccessful()){
                                                                    if(task4.getResult().getDocuments().size() > 0){
                                                                        model= new AnnualReportModel(currMonth,daysWorked,fullPresentCount, halfPresentCount,
                                                                                govtBaseRate,compBaseRate, advancePaid, prevLoanBalance, additionalArrears);
                                                                        annual_report_arr.add(model);
                                                                        loading_dialog.dismiss();
                                                                    }
                                                                    else{
                                                                        Log.e("res_error","04 Array No Size");
                                                                    }
                                                                }
                                                                else{
                                                                    String msg= task4.getException()!=null && task4.getException().getLocalizedMessage()!=null ? task4.getException().getLocalizedMessage() : "No Error !!";
                                                                    Log.e("firebase_error","04 Error is : "+msg);
                                                                    loading_dialog.cancel();
                                                                }
                                                            });
                                                }
                                                else {
                                                    Log.e("res_error", "02 Array No Size");
                                                }
                                            }
                                            else {
                                                String msg= task3.getException()!=null && task3.getException().getLocalizedMessage()!=null ? task3.getException().getLocalizedMessage() : "No Error !!";
                                                Log.e("firebase_error","03 Error is : "+msg);
                                                loading_dialog.cancel();
                                            }
                                        });
                            }
                            else{
                                Log.e("res_error","02 Array No Size");
                            }
                        }
                        else {
                            String msg= task2.getException()!=null && task2.getException().getLocalizedMessage()!=null ? task2.getException().getLocalizedMessage() : "No Error !!";
                            Log.e("firebase_error","02 Error is : "+msg);
                            loading_dialog.cancel();
                        }
                    });
        }

        new Handler().postDelayed(() -> {
            annualReportAdapter = new AnnualReportAdapter(getApplicationContext(),annual_report_arr);
            annualreport_finalrec.setLayoutManager(new LinearLayoutManager(getApplicationContext()));
            annualreport_finalrec.setAdapter(annualReportAdapter);
            annualReportAdapter.notifyDataSetChanged();
        },4000);
    }

    private void addGovtRateToDB(Long financial_year, int curr_month, ArrayList<String> notadded_rates, DocumentSnapshot doc, boolean isadd) {
        BottomSheetDialog dialog = new BottomSheetDialog(AnnualReportActivity.this, R.style.BottomSheetTheme);
        dialog.setContentView(R.layout.add_company_rate_btmdialog);
        dialog.setCanceledOnTouchOutside(false);
        dialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
        dialog.show();

        dialog.setOnCancelListener(dialogInterface -> finish());

        TextInputLayout acr_rate1 = dialog.findViewById(R.id.acr_rate1);
        TextInputLayout acr_rate2 = dialog.findViewById(R.id.acr_rate2);
        TextInputLayout acr_rate3 = dialog.findViewById(R.id.acr_rate3);
        TextInputLayout acr_rate4 = dialog.findViewById(R.id.acr_rate4);
        TextView acr_add_btn = dialog.findViewById(R.id.acr_add_btn);

        setVisibilityOfTextInputLayout("apr", "jul", acr_rate1, curr_month, notadded_rates);
        setVisibilityOfTextInputLayout("jul", "apr", acr_rate2, curr_month, notadded_rates);
        setVisibilityOfTextInputLayout("oct", "jan", acr_rate3, curr_month, notadded_rates);
        setVisibilityOfTextInputLayout("jan", "oct", acr_rate4, curr_month, notadded_rates);

        String empty_msg = "Enter a base rate !!";
        String nozero_msg = "Please enter a value greater than zero !!";
        acr_add_btn.setOnClickListener(v1 -> {
            String r1_txt = acr_rate1.getEditText().getText().toString();
            String r2_txt = acr_rate2.getEditText().getText().toString();
            String r3_txt = acr_rate3.getEditText().getText().toString();
            String r4_txt = acr_rate4.getEditText().getText().toString();

            if (acr_rate1.getVisibility() == View.VISIBLE && r1_txt.trim().length() <= 0) {
                TextInputLayout[] list = {acr_rate2, acr_rate3, acr_rate4};
                ArrayList<TextInputLayout> arr = new ArrayList<>();
                arr.addAll(Arrays.asList(list));
                updateCompanyRateEdittextErrorEnabled(acr_rate1, arr, empty_msg);
            } else if (acr_rate2.getVisibility() == View.VISIBLE && r2_txt.trim().length() <= 0) {
                TextInputLayout[] list = {acr_rate1, acr_rate3, acr_rate4};
                ArrayList<TextInputLayout> arr = new ArrayList<>();
                arr.addAll(Arrays.asList(list));
                updateCompanyRateEdittextErrorEnabled(acr_rate2, arr, empty_msg);
            } else if (acr_rate3.getVisibility() == View.VISIBLE && r3_txt.trim().length() <= 0) {
                TextInputLayout[] list = {acr_rate1, acr_rate2, acr_rate4};
                ArrayList<TextInputLayout> arr = new ArrayList<>();
                arr.addAll(Arrays.asList(list));
                updateCompanyRateEdittextErrorEnabled(acr_rate3, arr, empty_msg);
            } else if (acr_rate4.getVisibility() == View.VISIBLE && r4_txt.trim().length() <= 0) {
                TextInputLayout[] list = {acr_rate1, acr_rate2, acr_rate3};
                ArrayList<TextInputLayout> arr = new ArrayList<>();
                arr.addAll(Arrays.asList(list));
                updateCompanyRateEdittextErrorEnabled(acr_rate4, arr, empty_msg);
            } else if (acr_rate1.getVisibility() == View.VISIBLE && Integer.parseInt(r1_txt) <= 0) {
                TextInputLayout[] list = {acr_rate2, acr_rate3, acr_rate4};
                ArrayList<TextInputLayout> arr = new ArrayList<>();
                arr.addAll(Arrays.asList(list));
                updateCompanyRateEdittextErrorEnabled(acr_rate1, arr, nozero_msg);
            } else if (acr_rate2.getVisibility() == View.VISIBLE && Integer.parseInt(r2_txt) <= 0) {
                TextInputLayout[] list = {acr_rate1, acr_rate3, acr_rate4};
                ArrayList<TextInputLayout> arr = new ArrayList<>();
                arr.addAll(Arrays.asList(list));
                updateCompanyRateEdittextErrorEnabled(acr_rate2, arr, nozero_msg);
            } else if (acr_rate3.getVisibility() == View.VISIBLE && Integer.parseInt(r3_txt) <= 0) {
                TextInputLayout[] list = {acr_rate1, acr_rate2, acr_rate4};
                ArrayList<TextInputLayout> arr = new ArrayList<>();
                arr.addAll(Arrays.asList(list));
                updateCompanyRateEdittextErrorEnabled(acr_rate3, arr, nozero_msg);
            } else if (acr_rate4.getVisibility() == View.VISIBLE && Integer.parseInt(r4_txt) <= 0) {
                TextInputLayout[] list = {acr_rate1, acr_rate2, acr_rate3};
                ArrayList<TextInputLayout> arr = new ArrayList<>();
                arr.addAll(Arrays.asList(list));
                updateCompanyRateEdittextErrorEnabled(acr_rate4, arr, nozero_msg);
            } else {
                dialog.dismiss();
                Dialog dialog1 = functions.createDialogBox(AnnualReportActivity.this, R.layout.loading_dialog, false);
                dialog1.show();
                Map<String, Object> data = new HashMap<>();
                if (acr_rate1.getVisibility() == View.VISIBLE) {
                    data.put("apr_rate", Long.parseLong(r1_txt));
                    data.put("may_rate", Long.parseLong(r1_txt));
                    data.put("jun_rate", Long.parseLong(r1_txt));
                }
                if (acr_rate2.getVisibility() == View.VISIBLE) {
                    data.put("jul_rate", Long.parseLong(r2_txt));
                    data.put("aug_rate", Long.parseLong(r2_txt));
                    data.put("sep_rate", Long.parseLong(r2_txt));
                }
                if (acr_rate3.getVisibility() == View.VISIBLE) {
                    data.put("oct_rate", Long.parseLong(r3_txt));
                    data.put("nov_rate", Long.parseLong(r3_txt));
                    data.put("dec_rate", Long.parseLong(r3_txt));
                }
                if (acr_rate4.getVisibility() == View.VISIBLE) {
                    data.put("jan_rate", Long.parseLong(r4_txt));
                    data.put("feb_rate", Long.parseLong(r4_txt));
                    data.put("mar_rate", Long.parseLong(r4_txt));
                }
                if (isadd) {
                    data.put("company_reference", db.document(comp_path));
                    data.put("financial_year", financial_year);
                }

                Task<Void> addGovtBaseRateTask = isadd ? db.collection("GovtBaseRate").document().set(data) :
                        db.collection("GovtBaseRate").document(doc.getId()).update(data);

                addGovtBaseRateTask
                        .addOnCompleteListener(task1 -> {
                            Log.e("firebase_error", "Entering....");
                            if (task1.isSuccessful()) {
                                Snackbar.make(annualreport_mainlay, "Govornment Base Rate Added Successfully.", Snackbar.LENGTH_SHORT).show();
                                dialog1.dismiss();
                            } else {
                                dialog1.cancel();
                                String msg = task1.getException().getLocalizedMessage() != null ? task1.getException().getLocalizedMessage() : "No Error !!";
                                Log.e("firebase_error", msg);
                                Snackbar.make(annualreport_mainlay, "Unable to add the Govornment Base Rate !! Please try again", Snackbar.LENGTH_SHORT).show();
                            }
                        });
            }
        });
    }

    private void updateCompanyRateEdittextErrorEnabled(@NonNull TextInputLayout t,
                                                       @NonNull ArrayList<TextInputLayout> arr, String msg) {
        t.setErrorEnabled(true);
        t.setError(msg);
        t.requestFocus();
        for (TextInputLayout item : arr) {
            item.setErrorEnabled(false);
            item.clearFocus();
            item.setError(null);
        }
    }

    private void annualReportInits() {
        annualreport_mainlay = findViewById(R.id.annualreport_mainlay);
        annualreport_generatereport_btn = findViewById(R.id.annualreport_generatereport_btn);
        annualreport_finalrec = findViewById(R.id.annualreport_finalrec);
        annualreport_back_btn = findViewById(R.id.annualreport_back_btn);
        annualreport_calender_btn = findViewById(R.id.annualreport_calender_btn);
        annualreport_calprev_date = findViewById(R.id.annualreport_calprev_date);
        annualreport_calnext_date = findViewById(R.id.annualreport_calnext_date);
        annualreport_curr_date = findViewById(R.id.annualreport_curr_date);

        getData = getIntent();
        firebaseAuth = FirebaseAuth.getInstance();
        firebaseUser = firebaseAuth.getCurrentUser();
        db = FirebaseFirestore.getInstance();
        comp_path = functions.getSharedPrefsValue(getApplicationContext(), "user_data", "company_path", "string", null);
        curr_fin_year = functions.getMonthList().indexOf(functions.getTodayDate("MMM").toLowerCase()) <= 2 ?
                Long.parseLong(functions.getModifiedMonthTodayDate("yyyy", -1)) :
                Long.parseLong(functions.getTodayDate("yyyy"));

        annualreport_curr_date.setText(String.valueOf(curr_fin_year));
        max_fin_year = curr_fin_year;
    }

    private void setVisibilityOfTextInputLayout(String m1, String m2, TextInputLayout r, int curr_month, ArrayList<String> notadded_rates) {
        if (functions.getMonthList().indexOf(m1) <= curr_month && notadded_rates.contains(m1)) {
            r.setVisibility(View.VISIBLE);
            if (!(functions.getMonthList().indexOf(m2) <= curr_month && notadded_rates.contains(m2))) {
                r.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
            }
        } else r.setVisibility(View.GONE);
    }

}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


package com.rushikeshsantoshv.wetrack.Activities;

import android.Manifest;
import android.app.Dialog;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.demogorgorn.monthpicker.MonthPickerDialog;
import com.google.android.gms.tasks.Task;
import com.google.android.material.bottomsheet.BottomSheetDialog;
import com.google.android.material.snackbar.Snackbar;
import com.google.android.material.textfield.TextInputLayout;
import com.google.firebase.Timestamp;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.Query;
import com.karumi.dexter.Dexter;
import com.karumi.dexter.MultiplePermissionsReport;
import com.karumi.dexter.PermissionToken;
import com.karumi.dexter.listener.PermissionRequest;
import com.karumi.dexter.listener.multi.MultiplePermissionsListener;
import com.rushikeshsantoshv.wetrack.Adapters.AnnualReportAdapter;
import com.rushikeshsantoshv.wetrack.DataModels.AnnualReportModel;
import com.rushikeshsantoshv.wetrack.DataModels.Functions;
import com.rushikeshsantoshv.wetrack.R;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnnualReportActivity extends AppCompatActivity {

    TextView annualreport_generatereport_btn;
    RecyclerView annualreport_finalrec;
    ImageButton annualreport_back_btn, annualreport_calender_btn, annualreport_calprev_date, annualreport_calnext_date;
    TextView annualreport_curr_date;
    RelativeLayout annualreport_mainlay;

    FirebaseFirestore db;
    FirebaseAuth firebaseAuth;
    FirebaseUser firebaseUser;
    String comp_path;
    Long curr_fin_year;
    Long min_fin_year;
    Long max_fin_year;
    Timestamp comp_created_year;
    AnnualReportModel model;
    ArrayList<AnnualReportModel> annual_report_arr = new ArrayList<>();

    Intent getData;
    String emp_path;
    long present_count = 0, half_day_count = 0, absent_count = 0;
    private String currMonth="Sample";
    private int daysWorked=0, fullPresentCount=0, halfPresentCount=0;
    private double govtBaseRate =0, compBaseRate= 0;
    private double advancePaid= 0, prevLoanBalance= 0, additionalArrears= 0;

    AnnualReportAdapter annualReportAdapter;
    Functions functions = new Functions();
    File folderDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS + "/WeTrack");

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_annual_report);
        functions.coloredStatusBarDarkTextDesign(AnnualReportActivity.this, R.color.maincolor_light, R.color.white);

        annualReportInits();

        emp_path = (getData != null && getData.getStringExtra("emp_reference_id") != null
                && !getData.getStringExtra("emp_reference_id").equals("")) ?
                getData.getStringExtra("emp_reference_id") : "Employees/sampleuser";

        db.collection("Companies")
                .document(db.document(comp_path).getId())
                .get()
                .addOnCompleteListener(task -> {
                    comp_created_year = (task.isSuccessful()
                            && task.getResult().getTimestamp("company_created") != null ?
                            task.getResult().getTimestamp("company_created") : Timestamp.now());

                    min_fin_year = Long.parseLong(functions.getStringFromDate(comp_created_year.toDate(), "yyyy"));

                    annualreport_calender_btn.setOnClickListener(v -> {
                        MonthPickerDialog.Builder builder = new MonthPickerDialog.Builder(AnnualReportActivity.this,
                                (month, year) -> {
                                    curr_fin_year = (long) year;
                                    annualreport_curr_date.setText(String.valueOf(curr_fin_year));
                                    checkGovtBaseRate();
                                    loadAnnualReport();
                                }, Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH));

                        builder.setActivatedYear(Integer.parseInt(functions.getTodayDate("yyyy")))
                                .setMinYear(Math.toIntExact(min_fin_year))
                                .setMaxYear(Math.toIntExact(max_fin_year))
                                .showYearOnly()
                                .setTitle("Select Desired Financial Year")
                                .build().show();
                    });
                });

        checkGovtBaseRate();
        loadAnnualReport();

        annualreport_calprev_date.setOnClickListener(v->{
            startActivity(new Intent(getApplicationContext(),SampleActivity.class));
        });

        annualreport_generatereport_btn.setOnClickListener(v -> {
            Dexter.withContext(AnnualReportActivity.this)
                    .withPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_EXTERNAL_STORAGE)
                    .withListener(new MultiplePermissionsListener() {

                        @Override
                        public void onPermissionsChecked(MultiplePermissionsReport multiplePermissionsReport) {
                            try {

                                if (!folderDir.exists()) {
                                    folderDir.mkdirs();
                                }

                                File file = new File(folderDir, "Demo.xls");
                                HSSFWorkbook hssfWorkbook = new HSSFWorkbook();
                                HSSFSheet sheet = hssfWorkbook.createSheet();
                                HSSFRow row = sheet.createRow(0);
                                HSSFCell cell = row.createCell(0);
                                cell.setCellValue("Sample Data");

                                FileOutputStream fileOutputStream = new FileOutputStream(file);
                                hssfWorkbook.write(fileOutputStream);

                                fileOutputStream.flush();
                                fileOutputStream.close();

                            } catch (Exception e) {
                                Log.e("file_error", "The file error is : " + e);
                            }
                        }

                        @Override
                        public void onPermissionRationaleShouldBeShown(List<PermissionRequest> list, PermissionToken permissionToken) {
                            permissionToken.continuePermissionRequest();
                        }
                    }).check();
        });

    }

    private void checkGovtBaseRate() {

        Long financial_year = annualreport_curr_date.getText().equals(functions.getTodayDate("yyyy")) ?
                (functions.getMonthList().indexOf(functions.getTodayDate("MMM").toLowerCase()) <= 2 ?
                        Long.parseLong(functions.getModifiedMonthTodayDate("yyyy", -1)) :
                        Long.parseLong(functions.getTodayDate("yyyy"))) : Long.parseLong(annualreport_curr_date.getText().toString());

        // Long financial_year = 2022L;

        int curr_month = annualreport_curr_date.getText().equals(functions.getTodayDate("yyyy")) ?
                functions.getMonthList().indexOf(functions.getTodayDate("MMM").toLowerCase()) :
                functions.getMonthList().indexOf("mar");
        // int curr_month = functions.getMonthList().indexOf("mar");
        ArrayList<String> notadded_rates = new ArrayList<>();

        db.collection("GovtBaseRate")
                .whereEqualTo("company_reference", db.document(comp_path))
                .whereEqualTo("financial_year", financial_year)
                .get()
                .addOnCompleteListener(task -> {
                    if (task.isSuccessful()) {
                        if (task.getResult().getDocuments().size() > 0) {
                            DocumentSnapshot doc = task.getResult().getDocuments().get(0);
                            boolean check_rate = true;
                            for (int i = 0; i <= curr_month; i++) {
                                if (!doc.contains(functions.getMonthList().get(i) + "_rate")) {
                                    notadded_rates.add(functions.getMonthList().get(i));
                                    check_rate = false;
                                }
                            }

                            if (!check_rate) {
                                addGovtRateToDB(financial_year, curr_month, notadded_rates, doc, false);
                            }

                        } else {
                            Log.e("firebase_error", "The error is : no size");
                            for (int i = 0; i <= curr_month; i++) {
                                notadded_rates.add(functions.getMonthList().get(i));
                            }
                            for (String item : notadded_rates) {
                                Log.e("month_item", "The item is : " + item + " and current month is : " + curr_month);
                            }
                            addGovtRateToDB(financial_year, curr_month, notadded_rates, null, true);
                        }
                    } else {
                        String msg = task.getException() != null && task.getException().getLocalizedMessage() != null ? task.getException().getLocalizedMessage() : "No Error ...";
                        Log.e("firebase_error", "The error is : " + msg);
                    }
                });

    }

    private synchronized void loadAnnualReport() {

        model= new AnnualReportModel();
        if(annual_report_arr.size() > 0) annual_report_arr.clear();

        Long financial_year = annualreport_curr_date.getText().equals(functions.getTodayDate("yyyy")) ?
                (functions.getMonthList().indexOf(functions.getTodayDate("MMM").toLowerCase()) <= 2 ?
                        Long.parseLong(functions.getModifiedMonthTodayDate("yyyy", -1)) :
                        Long.parseLong(functions.getTodayDate("yyyy"))) : Long.parseLong(annualreport_curr_date.getText().toString());

        Dialog loading_dialog= functions.createDialogBox(AnnualReportActivity.this, R.layout.loading_dialog,false);
        loading_dialog.show();

        Log.e("user_reference", emp_path);

        Calendar start_calendar = Calendar.getInstance();
        Calendar end_calender = Calendar.getInstance();
        start_calendar.set(Calendar.YEAR, Math.toIntExact(financial_year));
        start_calendar.set(Calendar.MONTH, 3);
        start_calendar.set(Calendar.DAY_OF_MONTH, 1);

        if (financial_year == Long.parseLong(functions.getTodayDate("yyyy")) ||
                financial_year == Long.parseLong(functions.getModifiedYearTodayDate("yyyy", -1))) {
            Log.e("condition_check", "IF Entered...");
            end_calender.set(Calendar.YEAR, financial_year == Long.parseLong(functions.getTodayDate("yyyy")) ?
                    Math.toIntExact(financial_year) : (Math.toIntExact(financial_year) + 1));
            end_calender.set(Calendar.MONTH, financial_year == Long.parseLong(functions.getTodayDate("yyyy")) ?
                    (Integer.parseInt(functions.getTodayDate("MM")) - 2) : 2);
            end_calender.set(Calendar.DAY_OF_MONTH, end_calender.getActualMaximum(Calendar.DAY_OF_MONTH));
        }
        else {
            Log.e("condition_check", "ELSE Entered...");
            end_calender.set(Calendar.YEAR, Math.toIntExact(financial_year) + 1);
            end_calender.set(Calendar.MONTH, 2);
            end_calender.set(Calendar.DAY_OF_MONTH, end_calender.getActualMaximum(Calendar.DAY_OF_MONTH));
        }

        for (int i = 0; i <= functions.getTotalNoOfMonths(start_calendar, end_calender); i++) {

            int looped_year= (i >= 9) ? start_calendar.get(Calendar.YEAR)+1 : start_calendar.get(Calendar.YEAR);
            Calendar c1 = Calendar.getInstance();
            c1.set(Calendar.DAY_OF_MONTH, 1);
            c1.set(Calendar.MONTH, functions.getThreeLetterMonths().indexOf(functions.getMonthList().get(i)));
            c1.set(Calendar.YEAR, looped_year);
            Timestamp t1 = new Timestamp(functions.getDateFromString(functions.getStringFromDate(c1.getTime(), "dd/MM/yyyy"), "dd/MM/yyyy"));

            Calendar c2 = Calendar.getInstance();
            c2.set(Calendar.DAY_OF_MONTH, c1.getActualMaximum(Calendar.DAY_OF_MONTH));
            c2.set(Calendar.MONTH, c1.get(Calendar.MONTH));
            c2.set(Calendar.YEAR, c1.get(Calendar.YEAR));
            Timestamp t2 = new Timestamp(functions.getDateFromString(functions.getStringFromDate(c2.getTime(), "dd/MM/yyyy"), "dd/MM/yyyy"));

            int i1 = i;

            /*Log.e("each_month","The current start date is : "+functions.getStringFromDate(t1.toDate(),"dd/MM/yyyy") +
                    " and the end date is : "+functions.getStringFromDate(t2.toDate(),"dd/MM/yyyy"));*/

            db.collection("Attendances")
                    .orderBy("attend_date", Query.Direction.DESCENDING)
                    .whereEqualTo("attend_emp_reference", db.document(emp_path))
                    .whereGreaterThanOrEqualTo("attend_date", t1)
                    .whereLessThanOrEqualTo("attend_date", t2)
                    .get()
                    .addOnCompleteListener(task2 -> {
                        if (task2.isSuccessful()) {
                            if (task2.getResult().getDocuments().size() > 0) {
                                List<DocumentSnapshot> attendance_arr = task2.getResult().getDocuments();

                                currMonth="Sample";
                                daysWorked=0;
                                fullPresentCount=0;
                                halfPresentCount=0;
                                govtBaseRate =0;
                                compBaseRate= 0;
                                advancePaid= 0;
                                prevLoanBalance= 0;
                                additionalArrears= 0;
                                present_count = 0;
                                half_day_count = 0;
                                absent_count = 0;

                                for (DocumentSnapshot attendance : attendance_arr) {
                                    present_count += (attendance.getLong("attend_status") == 1) ? 1 : 0;
                                    half_day_count += (attendance.getLong("attend_status") == 2) ? 1 : 0;
                                    absent_count += (attendance.getLong("attend_status") == 3) ? 1 : 0;
                                }
                                fullPresentCount = Math.toIntExact(present_count);
                                halfPresentCount = Math.toIntExact(half_day_count);
                                daysWorked = fullPresentCount + halfPresentCount;
                                Log.e("each_attendances","The attendance count is : "+daysWorked);
                                annual_report_arr.add(i1,new AnnualReportModel(currMonth,daysWorked,fullPresentCount, halfPresentCount,
                                        govtBaseRate, compBaseRate, advancePaid, prevLoanBalance, additionalArrears));
                                Calendar currCalender = Calendar.getInstance();
                                currCalender.setTime(t1.toDate());
                                currMonth = functions.getMonthFullName(functions.getThreeLetterMonths().indexOf(functions.getMonthList().get(i1)));
                                Log.e("data", "The current month is "+currMonth);

                                db.collection("Payments")
                                        .orderBy("pemp_timestamp", Query.Direction.DESCENDING)
                                        .whereEqualTo("pemp_emp_reference", db.document(emp_path))
                                        .whereGreaterThanOrEqualTo("pemp_timestamp", t1)
                                        .whereLessThanOrEqualTo("pemp_timestamp", t2)
                                        .get()
                                        .addOnCompleteListener(task3 -> {
                                            if (task3.isSuccessful()) {
                                                if (task3.getResult().getDocuments().size() > 0) {
                                                    Log.e("pay_size","The current month is : "+currMonth+" and The payment size is : "+task3.getResult().getDocuments().size());
                                                    // Log.e("data", "The company base rate of "+currMonth+" is : " + task3.getResult().getDocuments().get(0).getLong("pemp_base_rate"));
                                                    DocumentSnapshot doc= task3.getResult().getDocuments().get(0);
                                                    annual_report_arr.get(i1).setCompBaseRate(doc.getLong("pemp_base_rate"));
                                                    db.collection("GovtBaseRate")
                                                            .whereEqualTo("company_reference", db.document(comp_path))
                                                            .whereEqualTo("financial_year", financial_year)
                                                            .get()
                                                            .addOnCompleteListener(task4 -> {
                                                                if(task4.isSuccessful()){
                                                                    if(task4.getResult().getDocuments().size() > 0){
                                                                        /*model= new AnnualReportModel(currMonth,daysWorked,fullPresentCount, halfPresentCount,
                                                                                govtBaseRate,compBaseRate, advancePaid, prevLoanBalance, additionalArrears);
                                                                        annual_report_arr.add(model);*/
                                                                        loading_dialog.dismiss();
                                                                    }
                                                                    else{
                                                                        Log.e("res_error","04 Array No Size");
                                                                    }
                                                                }
                                                                else{
                                                                    String msg= task4.getException()!=null && task4.getException().getLocalizedMessage()!=null ? task4.getException().getLocalizedMessage() : "No Error !!";
                                                                    Log.e("firebase_error","04 Error is : "+msg);
                                                                    loading_dialog.cancel();
                                                                }
                                                            });
                                                }
                                                else {
                                                    Log.e("res_error", "02 Array No Size");
                                                }
                                            }
                                            else {
                                                String msg= task3.getException()!=null && task3.getException().getLocalizedMessage()!=null ? task3.getException().getLocalizedMessage() : "No Error !!";
                                                Log.e("firebase_error","03 Error is : "+msg);
                                                loading_dialog.cancel();
                                            }
                                        });
                            }
                            else{
                                Log.e("res_error","02 Array No Size");
                            }
                        }
                        else {
                            String msg= task2.getException()!=null && task2.getException().getLocalizedMessage()!=null ? task2.getException().getLocalizedMessage() : "No Error !!";
                            Log.e("firebase_error","02 Error is : "+msg);
                            loading_dialog.cancel();
                        }
                    });
        }

        new Handler().postDelayed(() -> {
            annualReportAdapter = new AnnualReportAdapter(getApplicationContext(),annual_report_arr);
            annualreport_finalrec.setLayoutManager(new LinearLayoutManager(getApplicationContext()));
            annualreport_finalrec.setAdapter(annualReportAdapter);
            annualReportAdapter.notifyDataSetChanged();
        },4000);

    }

    private synchronized void loadAnnualReport1() {

        model= new AnnualReportModel();
        if(annual_report_arr.size() > 0) annual_report_arr.clear();

        Long financial_year = annualreport_curr_date.getText().equals(functions.getTodayDate("yyyy")) ?
                (functions.getMonthList().indexOf(functions.getTodayDate("MMM").toLowerCase()) <= 2 ?
                        Long.parseLong(functions.getModifiedMonthTodayDate("yyyy", -1)) :
                        Long.parseLong(functions.getTodayDate("yyyy"))) : Long.parseLong(annualreport_curr_date.getText().toString());

        // Long financial_year = 2022L;

        Dialog loading_dialog= functions.createDialogBox(AnnualReportActivity.this, R.layout.loading_dialog,false);
        loading_dialog.show();

        Log.e("user_reference", emp_path);

        Calendar start_calendar = Calendar.getInstance();
        Calendar end_calender = Calendar.getInstance();
        start_calendar.set(Calendar.YEAR, Math.toIntExact(financial_year));
        start_calendar.set(Calendar.MONTH, 3);
        start_calendar.set(Calendar.DAY_OF_MONTH, 1);

        if (financial_year == Long.parseLong(functions.getTodayDate("yyyy")) ||
                financial_year == Long.parseLong(functions.getModifiedYearTodayDate("yyyy", -1))) {
            Log.e("condition_check", "IF Entered...");
            end_calender.set(Calendar.YEAR, financial_year == Long.parseLong(functions.getTodayDate("yyyy")) ?
                    Math.toIntExact(financial_year) : (Math.toIntExact(financial_year) + 1));
            end_calender.set(Calendar.MONTH, financial_year == Long.parseLong(functions.getTodayDate("yyyy")) ?
                    (Integer.parseInt(functions.getTodayDate("MM")) - 2) : 2);
            end_calender.set(Calendar.DAY_OF_MONTH, end_calender.getActualMaximum(Calendar.DAY_OF_MONTH));
        }
        else {
            Log.e("condition_check", "ELSE Entered...");
            end_calender.set(Calendar.YEAR, Math.toIntExact(financial_year) + 1);
            end_calender.set(Calendar.MONTH, 2);
            end_calender.set(Calendar.DAY_OF_MONTH, end_calender.getActualMaximum(Calendar.DAY_OF_MONTH));
        }

        for (int i = 0; i <= functions.getTotalNoOfMonths(start_calendar, end_calender); i++) {

            int looped_year= (i >= 9) ? start_calendar.get(Calendar.YEAR)+1 : start_calendar.get(Calendar.YEAR);
            Calendar c1 = Calendar.getInstance();
            c1.set(Calendar.DAY_OF_MONTH, 1);
            c1.set(Calendar.MONTH, functions.getThreeLetterMonths().indexOf(functions.getMonthList().get(i)));
            c1.set(Calendar.YEAR, looped_year);
            Timestamp t1 = new Timestamp(functions.getDateFromString(functions.getStringFromDate(c1.getTime(), "dd/MM/yyyy"), "dd/MM/yyyy"));

            Calendar c2 = Calendar.getInstance();
            c2.set(Calendar.DAY_OF_MONTH, c1.getActualMaximum(Calendar.DAY_OF_MONTH));
            c2.set(Calendar.MONTH, c1.get(Calendar.MONTH));
            c2.set(Calendar.YEAR, c1.get(Calendar.YEAR));
            Timestamp t2 = new Timestamp(functions.getDateFromString(functions.getStringFromDate(c2.getTime(), "dd/MM/yyyy"), "dd/MM/yyyy"));

            int i1 = i;

            /*Log.e("each_month","The current start date is : "+functions.getStringFromDate(t1.toDate(),"dd/MM/yyyy") +
                    " and the end date is : "+functions.getStringFromDate(t2.toDate(),"dd/MM/yyyy"));*/

            db.collection("Attendances")
                    .orderBy("attend_date", Query.Direction.DESCENDING)
                    .whereEqualTo("attend_emp_reference", db.document(emp_path))
                    .whereGreaterThanOrEqualTo("attend_date", t1)
                    .whereLessThanOrEqualTo("attend_date", t2)
                    .get()
                    .addOnCompleteListener(task2 -> {
                        if (task2.isSuccessful()) {
                            if (task2.getResult().getDocuments().size() > 0) {
                                List<DocumentSnapshot> attendance_arr = task2.getResult().getDocuments();

                                currMonth="Sample";
                                daysWorked=0;
                                fullPresentCount=0;
                                halfPresentCount=0;
                                govtBaseRate =0;
                                compBaseRate= 0;
                                advancePaid= 0;
                                prevLoanBalance= 0;
                                additionalArrears= 0;
                                present_count = 0;
                                half_day_count = 0;
                                absent_count = 0;

                                for (DocumentSnapshot attendance : attendance_arr) {
                                    present_count += (attendance.getLong("attend_status") == 1) ? 1 : 0;
                                    half_day_count += (attendance.getLong("attend_status") == 2) ? 1 : 0;
                                    absent_count += (attendance.getLong("attend_status") == 3) ? 1 : 0;
                                }
                                fullPresentCount = Math.toIntExact(present_count);
                                halfPresentCount = Math.toIntExact(half_day_count);
                                daysWorked = fullPresentCount + halfPresentCount;
                                Log.e("each_attendances","The attendance count is : "+daysWorked);
                                annual_report_arr.add(i1,new AnnualReportModel(currMonth,daysWorked,fullPresentCount, halfPresentCount,
                                        govtBaseRate, compBaseRate, advancePaid, prevLoanBalance, additionalArrears));
                                Calendar currCalender = Calendar.getInstance();
                                currCalender.setTime(t1.toDate());
                                currMonth = functions.getMonthFullName(functions.getThreeLetterMonths().indexOf(functions.getMonthList().get(i1)));
                                Log.e("data", "The current month is "+currMonth);

                                db.collection("Payments")
                                        .orderBy("pemp_timestamp", Query.Direction.DESCENDING)
                                        .whereEqualTo("pemp_emp_reference", db.document(emp_path))
                                        .whereGreaterThanOrEqualTo("pemp_timestamp", t1)
                                        .whereLessThanOrEqualTo("pemp_timestamp", t2)
                                        .get()
                                        .addOnCompleteListener(task3 -> {
                                            if (task3.isSuccessful()) {
                                                if (task3.getResult().getDocuments().size() > 0) {
                                                    Log.e("pay_size","The current month is : "+currMonth+" and The payment size is : "+task3.getResult().getDocuments().size());
                                                    // Log.e("data", "The company base rate of "+currMonth+" is : " + task3.getResult().getDocuments().get(0).getLong("pemp_base_rate"));
                                                    DocumentSnapshot doc= task3.getResult().getDocuments().get(0);
                                                    annual_report_arr.get(i1).setCompBaseRate(doc.getLong("pemp_base_rate"));
                                                    db.collection("GovtBaseRate")
                                                            .whereEqualTo("company_reference", db.document(comp_path))
                                                            .whereEqualTo("financial_year", financial_year)
                                                            .get()
                                                            .addOnCompleteListener(task4 -> {
                                                                if(task4.isSuccessful()){
                                                                    if(task4.getResult().getDocuments().size() > 0){
                                                                        /*model= new AnnualReportModel(currMonth,daysWorked,fullPresentCount, halfPresentCount,
                                                                                govtBaseRate,compBaseRate, advancePaid, prevLoanBalance, additionalArrears);
                                                                        annual_report_arr.add(model);*/
                                                                        loading_dialog.dismiss();
                                                                    }
                                                                    else{
                                                                        Log.e("res_error","04 Array No Size");
                                                                    }
                                                                }
                                                                else{
                                                                    String msg= task4.getException()!=null && task4.getException().getLocalizedMessage()!=null ? task4.getException().getLocalizedMessage() : "No Error !!";
                                                                    Log.e("firebase_error","04 Error is : "+msg);
                                                                    loading_dialog.cancel();
                                                                }
                                                            });
                                                }
                                                else {
                                                    Log.e("res_error", "02 Array No Size");
                                                }
                                            }
                                            else {
                                                String msg= task3.getException()!=null && task3.getException().getLocalizedMessage()!=null ? task3.getException().getLocalizedMessage() : "No Error !!";
                                                Log.e("firebase_error","03 Error is : "+msg);
                                                loading_dialog.cancel();
                                            }
                                        });
                            }
                            else{
                                Log.e("res_error","02 Array No Size");
                            }
                        }
                        else {
                            String msg= task2.getException()!=null && task2.getException().getLocalizedMessage()!=null ? task2.getException().getLocalizedMessage() : "No Error !!";
                            Log.e("firebase_error","02 Error is : "+msg);
                            loading_dialog.cancel();
                        }
                    });
        }

        new Handler().postDelayed(() -> {
            annualReportAdapter = new AnnualReportAdapter(getApplicationContext(),annual_report_arr);
            annualreport_finalrec.setLayoutManager(new LinearLayoutManager(getApplicationContext()));
            annualreport_finalrec.setAdapter(annualReportAdapter);
            annualReportAdapter.notifyDataSetChanged();
        },4000);

    }

    private void addGovtRateToDB(Long financial_year, int curr_month, ArrayList<String> notadded_rates, DocumentSnapshot doc, boolean isadd) {
        BottomSheetDialog dialog = new BottomSheetDialog(AnnualReportActivity.this, R.style.BottomSheetTheme);
        dialog.setContentView(R.layout.add_company_rate_btmdialog);
        dialog.setCanceledOnTouchOutside(false);
        dialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
        dialog.show();

        dialog.setOnCancelListener(dialogInterface -> finish());

        TextInputLayout acr_rate1 = dialog.findViewById(R.id.acr_rate1);
        TextInputLayout acr_rate2 = dialog.findViewById(R.id.acr_rate2);
        TextInputLayout acr_rate3 = dialog.findViewById(R.id.acr_rate3);
        TextInputLayout acr_rate4 = dialog.findViewById(R.id.acr_rate4);
        TextView acr_add_btn = dialog.findViewById(R.id.acr_add_btn);

        setVisibilityOfTextInputLayout("apr", "jul", acr_rate1, curr_month, notadded_rates);
        setVisibilityOfTextInputLayout("jul", "apr", acr_rate2, curr_month, notadded_rates);
        setVisibilityOfTextInputLayout("oct", "jan", acr_rate3, curr_month, notadded_rates);
        setVisibilityOfTextInputLayout("jan", "oct", acr_rate4, curr_month, notadded_rates);

        String empty_msg = "Enter a base rate !!";
        String nozero_msg = "Please enter a value greater than zero !!";
        acr_add_btn.setOnClickListener(v1 -> {
            String r1_txt = acr_rate1.getEditText().getText().toString();
            String r2_txt = acr_rate2.getEditText().getText().toString();
            String r3_txt = acr_rate3.getEditText().getText().toString();
            String r4_txt = acr_rate4.getEditText().getText().toString();

            if (acr_rate1.getVisibility() == View.VISIBLE && r1_txt.trim().length() <= 0) {
                TextInputLayout[] list = {acr_rate2, acr_rate3, acr_rate4};
                ArrayList<TextInputLayout> arr = new ArrayList<>();
                arr.addAll(Arrays.asList(list));
                updateCompanyRateEdittextErrorEnabled(acr_rate1, arr, empty_msg);
            } else if (acr_rate2.getVisibility() == View.VISIBLE && r2_txt.trim().length() <= 0) {
                TextInputLayout[] list = {acr_rate1, acr_rate3, acr_rate4};
                ArrayList<TextInputLayout> arr = new ArrayList<>();
                arr.addAll(Arrays.asList(list));
                updateCompanyRateEdittextErrorEnabled(acr_rate2, arr, empty_msg);
            } else if (acr_rate3.getVisibility() == View.VISIBLE && r3_txt.trim().length() <= 0) {
                TextInputLayout[] list = {acr_rate1, acr_rate2, acr_rate4};
                ArrayList<TextInputLayout> arr = new ArrayList<>();
                arr.addAll(Arrays.asList(list));
                updateCompanyRateEdittextErrorEnabled(acr_rate3, arr, empty_msg);
            } else if (acr_rate4.getVisibility() == View.VISIBLE && r4_txt.trim().length() <= 0) {
                TextInputLayout[] list = {acr_rate1, acr_rate2, acr_rate3};
                ArrayList<TextInputLayout> arr = new ArrayList<>();
                arr.addAll(Arrays.asList(list));
                updateCompanyRateEdittextErrorEnabled(acr_rate4, arr, empty_msg);
            } else if (acr_rate1.getVisibility() == View.VISIBLE && Integer.parseInt(r1_txt) <= 0) {
                TextInputLayout[] list = {acr_rate2, acr_rate3, acr_rate4};
                ArrayList<TextInputLayout> arr = new ArrayList<>();
                arr.addAll(Arrays.asList(list));
                updateCompanyRateEdittextErrorEnabled(acr_rate1, arr, nozero_msg);
            } else if (acr_rate2.getVisibility() == View.VISIBLE && Integer.parseInt(r2_txt) <= 0) {
                TextInputLayout[] list = {acr_rate1, acr_rate3, acr_rate4};
                ArrayList<TextInputLayout> arr = new ArrayList<>();
                arr.addAll(Arrays.asList(list));
                updateCompanyRateEdittextErrorEnabled(acr_rate2, arr, nozero_msg);
            } else if (acr_rate3.getVisibility() == View.VISIBLE && Integer.parseInt(r3_txt) <= 0) {
                TextInputLayout[] list = {acr_rate1, acr_rate2, acr_rate4};
                ArrayList<TextInputLayout> arr = new ArrayList<>();
                arr.addAll(Arrays.asList(list));
                updateCompanyRateEdittextErrorEnabled(acr_rate3, arr, nozero_msg);
            } else if (acr_rate4.getVisibility() == View.VISIBLE && Integer.parseInt(r4_txt) <= 0) {
                TextInputLayout[] list = {acr_rate1, acr_rate2, acr_rate3};
                ArrayList<TextInputLayout> arr = new ArrayList<>();
                arr.addAll(Arrays.asList(list));
                updateCompanyRateEdittextErrorEnabled(acr_rate4, arr, nozero_msg);
            } else {
                dialog.dismiss();
                Dialog dialog1 = functions.createDialogBox(AnnualReportActivity.this, R.layout.loading_dialog, false);
                dialog1.show();
                Map<String, Object> data = new HashMap<>();
                if (acr_rate1.getVisibility() == View.VISIBLE) {
                    data.put("apr_rate", Long.parseLong(r1_txt));
                    data.put("may_rate", Long.parseLong(r1_txt));
                    data.put("jun_rate", Long.parseLong(r1_txt));
                }
                if (acr_rate2.getVisibility() == View.VISIBLE) {
                    data.put("jul_rate", Long.parseLong(r2_txt));
                    data.put("aug_rate", Long.parseLong(r2_txt));
                    data.put("sep_rate", Long.parseLong(r2_txt));
                }
                if (acr_rate3.getVisibility() == View.VISIBLE) {
                    data.put("oct_rate", Long.parseLong(r3_txt));
                    data.put("nov_rate", Long.parseLong(r3_txt));
                    data.put("dec_rate", Long.parseLong(r3_txt));
                }
                if (acr_rate4.getVisibility() == View.VISIBLE) {
                    data.put("jan_rate", Long.parseLong(r4_txt));
                    data.put("feb_rate", Long.parseLong(r4_txt));
                    data.put("mar_rate", Long.parseLong(r4_txt));
                }
                if (isadd) {
                    data.put("company_reference", db.document(comp_path));
                    data.put("financial_year", financial_year);
                }

                Task<Void> addGovtBaseRateTask = isadd ? db.collection("GovtBaseRate").document().set(data) :
                        db.collection("GovtBaseRate").document(doc.getId()).update(data);

                addGovtBaseRateTask
                        .addOnCompleteListener(task1 -> {
                            Log.e("firebase_error", "Entering....");
                            if (task1.isSuccessful()) {
                                Snackbar.make(annualreport_mainlay, "Govornment Base Rate Added Successfully.", Snackbar.LENGTH_SHORT).show();
                                dialog1.dismiss();
                            } else {
                                dialog1.cancel();
                                String msg = task1.getException().getLocalizedMessage() != null ? task1.getException().getLocalizedMessage() : "No Error !!";
                                Log.e("firebase_error", msg);
                                Snackbar.make(annualreport_mainlay, "Unable to add the Govornment Base Rate !! Please try again", Snackbar.LENGTH_SHORT).show();
                            }
                        });
            }
        });
    }

    private void updateCompanyRateEdittextErrorEnabled(@NonNull TextInputLayout t,
                                                       @NonNull ArrayList<TextInputLayout> arr, String msg) {
        t.setErrorEnabled(true);
        t.setError(msg);
        t.requestFocus();
        for (TextInputLayout item : arr) {
            item.setErrorEnabled(false);
            item.clearFocus();
            item.setError(null);
        }
    }

    private void annualReportInits() {
        annualreport_mainlay = findViewById(R.id.annualreport_mainlay);
        annualreport_generatereport_btn = findViewById(R.id.annualreport_generatereport_btn);
        annualreport_finalrec = findViewById(R.id.annualreport_finalrec);
        annualreport_back_btn = findViewById(R.id.annualreport_back_btn);
        annualreport_calender_btn = findViewById(R.id.annualreport_calender_btn);
        annualreport_calprev_date = findViewById(R.id.annualreport_calprev_date);
        annualreport_calnext_date = findViewById(R.id.annualreport_calnext_date);
        annualreport_curr_date = findViewById(R.id.annualreport_curr_date);

        getData = getIntent();
        firebaseAuth = FirebaseAuth.getInstance();
        firebaseUser = firebaseAuth.getCurrentUser();
        db = FirebaseFirestore.getInstance();
        comp_path = functions.getSharedPrefsValue(getApplicationContext(), "user_data", "company_path", "string", null);
        curr_fin_year = functions.getMonthList().indexOf(functions.getTodayDate("MMM").toLowerCase()) <= 2 ?
                Long.parseLong(functions.getModifiedMonthTodayDate("yyyy", -1)) :
                Long.parseLong(functions.getTodayDate("yyyy"));

        annualreport_curr_date.setText(String.valueOf(curr_fin_year));
        max_fin_year = curr_fin_year;
    }

    private void setVisibilityOfTextInputLayout(String m1, String m2, TextInputLayout r, int curr_month, ArrayList<String> notadded_rates) {
        if (functions.getMonthList().indexOf(m1) <= curr_month && notadded_rates.contains(m1)) {
            r.setVisibility(View.VISIBLE);
            if (!(functions.getMonthList().indexOf(m2) <= curr_month && notadded_rates.contains(m2))) {
                r.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
            }
        } else r.setVisibility(View.GONE);
    }



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

package com.rushikeshsantoshv.wetrack.Activities;

import android.os.Bundle;
import android.util.Log;
import android.widget.TextView;

import androidx.appcompat.app.AppCompatActivity;

import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.Query;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import com.google.firebase.firestore.QuerySnapshot;
import com.rushikeshsantoshv.wetrack.DataModels.Functions;
import com.rushikeshsantoshv.wetrack.R;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

public class SampleActivity extends AppCompatActivity {

    FirebaseAuth firebaseAuth;
    FirebaseUser firebaseUser;
    FirebaseFirestore db;

    TextView sample_data_txt;
    String comp_path;
    Functions functions= new Functions();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_sample);

        sample_data_txt= findViewById(R.id.sample_data_txt);
        firebaseAuth= FirebaseAuth.getInstance();
        firebaseUser= firebaseAuth.getCurrentUser();
        db= FirebaseFirestore.getInstance();
        comp_path = functions.getSharedPrefsValue(getApplicationContext(), "user_data", "company_path", "string", null);


        Task<QuerySnapshot> query1= db.collection("Employees").whereEqualTo("company_path",db.document(comp_path)).get();

        Task<QuerySnapshot> query2= query1.continueWithTask(task -> {
            List<DocumentReference> docIds = new ArrayList<>();
            for (QueryDocumentSnapshot document : task.getResult()) {
                docIds.add(document.getReference());
            }

            Log.e("check","Query 01 entering...");

            Calendar start_calendar = Calendar.getInstance();
            Calendar end_calender = Calendar.getInstance();
            start_calendar.set(Calendar.YEAR, 2022);
            start_calendar.set(Calendar.MONTH, 3);
            start_calendar.set(Calendar.DAY_OF_MONTH, 1);

            end_calender.set(Calendar.YEAR, 2022);
            end_calender.set(Calendar.MONTH, 3);
            end_calender.set(Calendar.DAY_OF_MONTH, start_calendar.getActualMaximum(Calendar.DAY_OF_MONTH));

            String msg= task.getException()!=null && task.getException().getLocalizedMessage()!=null ? task.getException().getLocalizedMessage() : "No Error";
            Log.e("error",msg);
            return db.collection("Attendances").orderBy("attend_date", Query.Direction.ASCENDING).whereIn("attend_emp_reference", docIds).get();
        });

        query2.addOnSuccessListener(querySnapshot -> {
            if(querySnapshot.getDocuments().size() > 0){

                Log.e("check","Query 02 entering...");

                List<DocumentSnapshot> arr= querySnapshot.getDocuments();
                StringBuilder txt= new StringBuilder();
                for(DocumentSnapshot doc : arr){
                    String attend_txt= doc.getLong("attend_status")== 1 ? "Present" :
                            (doc.getLong("attend_status")== 2 ? "Half Day" : "Absent");
                    txt.append("Date - "+functions.getStringFromDate(doc.getTimestamp("attend_date").toDate(),"dd/MM/yyyy")+
                            " & Status - "+attend_txt+"\n");
                }
                sample_data_txt.setText(txt);
            }
            else{
                Log.e("size_error","The size is : 0");
            }
        }).addOnFailureListener(e -> Log.e("error","The errors are : "+(e.getLocalizedMessage()!=null ? e.getLocalizedMessage() : "No Error")));

        /*.whereEqualTo("attend_status",1)
                .whereGreaterThanOrEqualTo("attend_date",new Timestamp(start_calendar.getTime()))
                .whereLessThanOrEqualTo("attend_date",new Timestamp(end_calender.getTime()))*/

        /*Task<QuerySnapshot> query3 = query2.continueWithTask(task -> {
            QuerySnapshot querySnapshot2 = task.getResult();
            List<String> fieldValues = new ArrayList<>();
            for (QueryDocumentSnapshot document : querySnapshot2) {
                fieldValues.add(document.getString("field"));
            }
            return collection3Ref.whereIn("field", fieldValues).get();
        });*/

        /*Task<QuerySnapshot> query21= db.collection("Payments")
                .orderBy("pemp_timestamp", Query.Direction.DESCENDING)
                .whereEqualTo("pemp_emp_reference", db.document(""))
                .whereGreaterThanOrEqualTo("pemp_timestamp", Timestamp.now())
                .whereLessThanOrEqualTo("pemp_timestamp", Timestamp.now())
                .get();*/
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

private synchronized void loadAnnualReport1() {

        model = new AnnualReportModel();
        if (annual_report_arr.size() > 0) annual_report_arr.clear();

        Long financial_year = annualreport_curr_date.getText().equals(functions.getTodayDate("yyyy")) ?
                (functions.getMonthList().indexOf(functions.getTodayDate("MMM").toLowerCase()) <= 2 ?
                        Long.parseLong(functions.getModifiedMonthTodayDate("yyyy", -1)) :
                        Long.parseLong(functions.getTodayDate("yyyy"))) : Long.parseLong(annualreport_curr_date.getText().toString());

        // Long financial_year = 2022L;

        Dialog loading_dialog = functions.createDialogBox(AnnualReportActivity.this, R.layout.loading_dialog, false);
        loading_dialog.show();

        Log.e("user_reference", emp_path);

        Calendar start_calendar = Calendar.getInstance();
        Calendar end_calender = Calendar.getInstance();
        start_calendar.set(Calendar.YEAR, Math.toIntExact(financial_year));
        start_calendar.set(Calendar.MONTH, 3);
        start_calendar.set(Calendar.DAY_OF_MONTH, 1);

        if (financial_year == Long.parseLong(functions.getTodayDate("yyyy")) ||
                financial_year == Long.parseLong(functions.getModifiedYearTodayDate("yyyy", -1))) {
            Log.e("condition_check", "IF Entered...");
            end_calender.set(Calendar.YEAR, financial_year == Long.parseLong(functions.getTodayDate("yyyy")) ?
                    Math.toIntExact(financial_year) : (Math.toIntExact(financial_year) + 1));
            end_calender.set(Calendar.MONTH, financial_year == Long.parseLong(functions.getTodayDate("yyyy")) ?
                    (Integer.parseInt(functions.getTodayDate("MM")) - 2) : 2);
            end_calender.set(Calendar.DAY_OF_MONTH, end_calender.getActualMaximum(Calendar.DAY_OF_MONTH));
        } else {
            Log.e("condition_check", "ELSE Entered...");
            end_calender.set(Calendar.YEAR, Math.toIntExact(financial_year) + 1);
            end_calender.set(Calendar.MONTH, 2);
            end_calender.set(Calendar.DAY_OF_MONTH, end_calender.getActualMaximum(Calendar.DAY_OF_MONTH));
        }

        for (int i = 0; i <= functions.getTotalNoOfMonths(start_calendar, end_calender); i++) {

            int looped_year = (i >= 9) ? start_calendar.get(Calendar.YEAR) + 1 : start_calendar.get(Calendar.YEAR);
            Calendar c1 = Calendar.getInstance();
            c1.set(Calendar.DAY_OF_MONTH, 1);
            c1.set(Calendar.MONTH, functions.getThreeLetterMonths().indexOf(functions.getMonthList().get(i)));
            c1.set(Calendar.YEAR, looped_year);
            Timestamp t1 = new Timestamp(functions.getDateFromString(functions.getStringFromDate(c1.getTime(), "dd/MM/yyyy"), "dd/MM/yyyy"));

            Calendar c2 = Calendar.getInstance();
            c2.set(Calendar.DAY_OF_MONTH, c1.getActualMaximum(Calendar.DAY_OF_MONTH));
            c2.set(Calendar.MONTH, c1.get(Calendar.MONTH));
            c2.set(Calendar.YEAR, c1.get(Calendar.YEAR));
            Timestamp t2 = new Timestamp(functions.getDateFromString(functions.getStringFromDate(c2.getTime(), "dd/MM/yyyy"), "dd/MM/yyyy"));

            int i1 = i;

            /*Log.e("each_month","The current start date is : "+functions.getStringFromDate(t1.toDate(),"dd/MM/yyyy") +
                    " and the end date is : "+functions.getStringFromDate(t2.toDate(),"dd/MM/yyyy"));*/

            db.collection("Attendances")
                    .orderBy("attend_date", Query.Direction.DESCENDING)
                    .whereEqualTo("attend_emp_reference", db.document(emp_path))
                    .whereGreaterThanOrEqualTo("attend_date", t1)
                    .whereLessThanOrEqualTo("attend_date", t2)
                    .get()
                    .addOnCompleteListener(task2 -> {
                        if (task2.isSuccessful()) {
                            if (task2.getResult().getDocuments().size() > 0) {
                                List<DocumentSnapshot> attendance_arr = task2.getResult().getDocuments();

                                currMonth = "Sample";
                                daysWorked = 0;
                                fullPresentCount = 0;
                                halfPresentCount = 0;
                                govtBaseRate = 0;
                                compBaseRate = 0;
                                advancePaid = 0;
                                prevLoanBalance = 0;
                                additionalArrears = 0;
                                present_count = 0;
                                half_day_count = 0;
                                absent_count = 0;

                                for (DocumentSnapshot attendance : attendance_arr) {
                                    present_count += (attendance.getLong("attend_status") == 1) ? 1 : 0;
                                    half_day_count += (attendance.getLong("attend_status") == 2) ? 1 : 0;
                                    absent_count += (attendance.getLong("attend_status") == 3) ? 1 : 0;
                                }
                                fullPresentCount = Math.toIntExact(present_count);
                                halfPresentCount = Math.toIntExact(half_day_count);
                                daysWorked = fullPresentCount + halfPresentCount;
                                Log.e("each_attendances", "The attendance count is : " + daysWorked);
                                annual_report_arr.add(i1, new AnnualReportModel(currMonth, daysWorked, fullPresentCount, halfPresentCount,
                                        govtBaseRate, compBaseRate, advancePaid, prevLoanBalance, additionalArrears));
                                Calendar currCalender = Calendar.getInstance();
                                currCalender.setTime(t1.toDate());
                                currMonth = functions.getMonthFullName(functions.getThreeLetterMonths().indexOf(functions.getMonthList().get(i1)));
                                Log.e("data", "The current month is " + currMonth);

                                db.collection("Payments")
                                        .orderBy("pemp_timestamp", Query.Direction.DESCENDING)
                                        .whereEqualTo("pemp_emp_reference", db.document(emp_path))
                                        .whereGreaterThanOrEqualTo("pemp_timestamp", t1)
                                        .whereLessThanOrEqualTo("pemp_timestamp", t2)
                                        .get()
                                        .addOnCompleteListener(task3 -> {
                                            if (task3.isSuccessful()) {
                                                if (task3.getResult().getDocuments().size() > 0) {
                                                    Log.e("pay_size", "The current month is : " + currMonth + " and The payment size is : " + task3.getResult().getDocuments().size());
                                                    // Log.e("data", "The company base rate of "+currMonth+" is : " + task3.getResult().getDocuments().get(0).getLong("pemp_base_rate"));
                                                    DocumentSnapshot doc = task3.getResult().getDocuments().get(0);
                                                    annual_report_arr.get(i1).setCompBaseRate(doc.getLong("pemp_base_rate"));
                                                    db.collection("GovtBaseRate")
                                                            .whereEqualTo("company_reference", db.document(comp_path))
                                                            .whereEqualTo("financial_year", financial_year)
                                                            .get()
                                                            .addOnCompleteListener(task4 -> {
                                                                if (task4.isSuccessful()) {
                                                                    if (task4.getResult().getDocuments().size() > 0) {
                                                                        /*model= new AnnualReportModel(currMonth,daysWorked,fullPresentCount, halfPresentCount,
                                                                                govtBaseRate,compBaseRate, advancePaid, prevLoanBalance, additionalArrears);
                                                                        annual_report_arr.add(model);*/
                                                                        loading_dialog.dismiss();
                                                                    } else {
                                                                        Log.e("res_error", "04 Array No Size");
                                                                    }
                                                                } else {
                                                                    String msg = task4.getException() != null && task4.getException().getLocalizedMessage() != null ? task4.getException().getLocalizedMessage() : "No Error !!";
                                                                    Log.e("firebase_error", "04 Error is : " + msg);
                                                                    loading_dialog.cancel();
                                                                }
                                                            });
                                                } else {
                                                    Log.e("res_error", "02 Array No Size");
                                                }
                                            } else {
                                                String msg = task3.getException() != null && task3.getException().getLocalizedMessage() != null ? task3.getException().getLocalizedMessage() : "No Error !!";
                                                Log.e("firebase_error", "03 Error is : " + msg);
                                                loading_dialog.cancel();
                                            }
                                        });
                            } else {
                                Log.e("res_error", "02 Array No Size");
                            }
                        } else {
                            String msg = task2.getException() != null && task2.getException().getLocalizedMessage() != null ? task2.getException().getLocalizedMessage() : "No Error !!";
                            Log.e("firebase_error", "02 Error is : " + msg);
                            loading_dialog.cancel();
                        }
                    });
        }

        new Handler().postDelayed(() -> {
            annualReportAdapter = new AnnualReportAdapter(getApplicationContext(), annual_report_arr);
            annualreport_finalrec.setLayoutManager(new LinearLayoutManager(getApplicationContext()));
            annualreport_finalrec.setAdapter(annualReportAdapter);
            annualReportAdapter.notifyDataSetChanged();
        }, 4000);

    }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*if (comp_path != null) {
        Log.e("doc_val", "The document reference value is - " + emp_reference_id);
        DocumentReference emp_doc = db.document(emp_reference_id);
        DocumentReference comp_doc = db.document(comp_path);

        int selected_month= functions.getMonthFromString(functions.getStringFromDate(functions.getDateFromString(
                viewpayments_curr_date.getText().toString(),"MMM yyyy"),"MMM").toLowerCase());

        Calendar calendar = Calendar.getInstance();
        calendar.set(Calendar.MONTH, selected_month);
        Date startDate = calendar.getTime();

        db.collection("Attendances")
                .whereEqualTo("attend_company_reference", comp_doc)
                .whereEqualTo("attend_emp_reference", emp_doc)
                .whereGreaterThan("attend_date", startDate)
                .whereLessThan("attend_date", getEndDate(startDate))
                .get()
                .addOnCompleteListener(task -> {
                    int present_count = 0, halfday_count = 0, absent_count = 0;
                    if (task.isSuccessful()) {
                        if(task.getResult().size() > 0){
                            for (DocumentSnapshot emp : task.getResult().getDocuments()) {
                                Log.e("attend_perform", "The month and year is same");
                                if (emp.getLong("attend_status") == 1) {
                                    present_count++;
                                } else if (emp.getLong("attend_status") == 2) {
                                    halfday_count++;
                                } else if (emp.getLong("attend_status") == 3) {
                                    absent_count++;
                                }
                            }
                        }
                        else{
                            Log.e("date_arr","No Attendances Available !!");
                        }
                        viewpayments_present.setText("" + present_count);
                        viewpayments_absent.setText("" + absent_count);
                        viewpayments_halfday.setText("" + halfday_count);

//                                int weekoff_count= functions.getWeekOffCount();

                        YearMonth yearMonthObject = null;
                        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {
                            SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyyy");
                            try {
                                Date date = format.parse(functions.getTodayDate("dd-MM-yyyy"));
                                int month = Integer.parseInt(DateFormat.format("MM", date).toString());
                                int year = Integer.parseInt(DateFormat.format("yyyy", date).toString());

                                yearMonthObject = YearMonth.of(year, month);
                                int daysInMonth = yearMonthObject.lengthOfMonth();
                                int total_taken_attendance = present_count + absent_count + halfday_count;
                                viewpayments_notset.setText("" + (daysInMonth - total_taken_attendance));

                            } catch (ParseException e) {
                                e.printStackTrace();
                            }
                        }

                    } else {
                        String error= task.getException()!=null && task.getException().getLocalizedMessage()!=null ? task.getException().getLocalizedMessage() : "No Error !!";
                        Log.e("firebase_error", ""+error);
                        viewpayments_present.setText("No data");
                        viewpayments_absent.setText("No data");
                        viewpayments_halfday.setText("No data");
                    }
                });
    }*/

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

annualreport_generatereport_btn.setOnClickListener(v -> {
            Dexter.withContext(AnnualReportActivity.this)
                    .withPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_EXTERNAL_STORAGE)
                    .withListener(new MultiplePermissionsListener() {

                        @Override
                        public void onPermissionsChecked(MultiplePermissionsReport multiplePermissionsReport) {
                            try {
                                if (functions.checkInternetConnection(AnnualReportActivity.this)) {
                                    if (!folderDir.exists()) {
                                        folderDir.mkdirs();
                                    }

                                    financial_year = annualreport_curr_year.getText().equals(functions.getTodayDate("yyyy")) ?
                                            (functions.getMonthList().indexOf(functions.getTodayDate("MMM").toLowerCase()) <= 2 ?
                                                    Long.parseLong(functions.getModifiedMonthTodayDate("yyyy", -1)) :
                                                    Long.parseLong(functions.getTodayDate("yyyy"))) : Long.parseLong(annualreport_curr_year.getText().toString());

                                    String comp_name = functions.getSharedPrefsValue(getApplicationContext(), "user_data", "company_name",
                                            "string", "");
                                    File file = new File(folderDir, "Annual Report_" + comp_name + "_" + financial_year + "_" + emp_name + ".xls");

                                    HSSFWorkbook hssfWorkbook = new HSSFWorkbook();
                                    HSSFSheet sheet = hssfWorkbook.createSheet();

                                    HSSFRow row1 = sheet.createRow(0);
                                    row1.createCell(0).setCellValue(emp_name);

                                    HSSFCellStyle ename_style = hssfWorkbook.createCellStyle();
                                    ename_style.setIndention((short) 19);
                                    HSSFFont ename_font = hssfWorkbook.createFont();
                                    ename_font.setBold(true);
                                    ename_font.setFontHeightInPoints((short) 20);
                                    ename_style.setFont(ename_font);
                                    row1.setRowStyle(ename_style);


                                /*HSSFCellStyle heading_style = hssfWorkbook.createCellStyle();
                                heading_style.setAlignment(HorizontalAlignment.CENTER);
                                heading_style.setVerticalAlignment(VerticalAlignment.CENTER);
                                HSSFFont heading_font = hssfWorkbook.createFont();
                                heading_font.setBold(true);
                                heading_font.setFontHeightInPoints((short) 16);
                                heading_style.setFont(heading_font);
                                row2.setRowStyle(heading_style);*/

                                    HSSFRow row2 = sheet.createRow(1);
                                    row2.createCell(0).setCellValue("Month");
                                    row2.createCell(1).setCellValue("Worked Days");
                                    row2.createCell(2).setCellValue("Company Base Rate");
                                    row2.createCell(3).setCellValue("Monthly Wages");
                                    row2.createCell(4).setCellValue("Adv. Taken");
                                    row2.createCell(5).setCellValue("Adv. Paid");
                                    row2.createCell(6).setCellValue("Adv. Bal");
                                    row2.createCell(7).setCellValue("Govt Base Rate");
                                    row2.createCell(8).setCellValue("Actual Monthly Wg.");
                                    row2.createCell(9).setCellValue("Balance");
                                    row2.createCell(10).setCellValue("Wage Arrs");
                                    row2.createCell(11).setCellValue("Wg. Arrs Paid");
                                    row2.createCell(12).setCellValue("Wg. Arrs Bal.");
                                    row2.createCell(13).setCellValue("L/W\n20:1");
                                    row2.createCell(14).setCellValue("Bonus\n14%");
                                    row2.createCell(15).setCellValue("NA Fe 13");
                                    row2.createCell(16).setCellValue("Kambili");
                                    row2.createCell(17).setCellValue("MED-6");
                                    row2.createCell(18).setCellValue("Net Balance");


                                /*HSSFCellStyle content_style = hssfWorkbook.createCellStyle();
                                content_style.setAlignment(HorizontalAlignment.CENTER);
                                content_style.setVerticalAlignment(VerticalAlignment.CENTER);
                                row.setRowStyle(content_style);*/

                                    double govt_wag_arrears = 0;

                                    int total_working_days = 0;
                                    double total_comp_wages = 0;
                                    double final_adv_balance = 0;
                                    double total_actual_wages = 0;
                                    double total_govt_wages_bal = 0;

                                    for (int i = 0; i < annual_report_arr.size(); i++) {

                                        double comp_wages_amt = (annual_report_arr.get(i).getCompBaseRate() * annual_report_arr.get(i).getFullPresentCount()) +
                                                (((annual_report_arr.get(i).getCompBaseRate()) / 2) * annual_report_arr.get(i).getHalfPresentCount());

                                        double govt_wages_amt = (annual_report_arr.get(i).getGovtBaseRate() * annual_report_arr.get(i).getFullPresentCount()) +
                                                (((annual_report_arr.get(i).getGovtBaseRate()) / 2) * annual_report_arr.get(i).getHalfPresentCount());

                                        govt_wag_arrears += (i + 1) % 3 == 0 ? govt_wages_amt - comp_wages_amt : 0;
                                        govt_wag_arrears = (i + 1) % 3 == 0 ? govt_wag_arrears : 0;
                                        total_working_days += annual_report_arr.get(i).getDaysWorked();
                                        total_comp_wages += comp_wages_amt;
                                        total_actual_wages += govt_wages_amt;
                                        final_adv_balance = annual_report_arr.get(i).getLoanBalance();
                                        total_govt_wages_bal += govt_wages_amt - comp_wages_amt;

                                        HSSFRow row = sheet.createRow(i + 2);
                                        row.createCell(0).setCellValue(annual_report_arr.get(i).getCurrMonth());
                                        row.createCell(1).setCellValue(annual_report_arr.get(i).getDaysWorked());
                                        row.createCell(2).setCellValue(annual_report_arr.get(i).getCompBaseRate());
                                        row.createCell(3).setCellValue(comp_wages_amt);
                                        row.createCell(4).setCellValue(annual_report_arr.get(i).getAdvanceTaken());
                                        row.createCell(5).setCellValue(annual_report_arr.get(i).getAdvancePaid());
                                        row.createCell(6).setCellValue(annual_report_arr.get(i).getLoanBalance());
                                        row.createCell(7).setCellValue(annual_report_arr.get(i).getGovtBaseRate());
                                        row.createCell(8).setCellValue(govt_wages_amt);
                                        row.createCell(9).setCellValue(govt_wages_amt - comp_wages_amt);
                                        row.createCell(10).setCellValue(govt_wag_arrears);
                                        row.createCell(11).setCellValue(0);
                                        row.createCell(12).setCellValue(govt_wag_arrears);
                                        row.createCell(13).setCellValue("-");
                                        row.createCell(14).setCellValue("-");
                                        row.createCell(15).setCellValue("-");
                                        row.createCell(16).setCellValue("-");
                                        row.createCell(17).setCellValue("-");
                                        row.createCell(18).setCellValue("-");

                                    }

                                    HSSFRow total_row = sheet.createRow(annual_report_arr.size() + 2);
                                    total_row.createCell(0).setCellValue("");
                                    total_row.createCell(1).setCellValue(total_working_days);
                                    total_row.createCell(2).setCellValue("");
                                    total_row.createCell(3).setCellValue(total_comp_wages);
                                    total_row.createCell(4).setCellValue("");
                                    total_row.createCell(5).setCellValue("");
                                    total_row.createCell(6).setCellValue(final_adv_balance);
                                    total_row.createCell(7).setCellValue("");
                                    total_row.createCell(8).setCellValue(total_actual_wages);
                                    total_row.createCell(9).setCellValue(total_govt_wages_bal);
                                    total_row.createCell(10).setCellValue(total_govt_wages_bal);
                                    total_row.createCell(11).setCellValue(0);
                                    total_row.createCell(12).setCellValue(total_govt_wages_bal);
                                    total_row.createCell(13).setCellValue("");
                                    total_row.createCell(14).setCellValue("");
                                    total_row.createCell(15).setCellValue("");
                                    total_row.createCell(16).setCellValue("");
                                    total_row.createCell(17).setCellValue("");
                                    total_row.createCell(18).setCellValue("");

                                    FileOutputStream fileOutputStream = new FileOutputStream(file);
                                    hssfWorkbook.write(fileOutputStream);

                                    fileOutputStream.flush();
                                    fileOutputStream.close();
                                    Snackbar.make(annualreport_mainlay, "Annual Report of " + financial_year + " Financial Year Created Successfully.", Snackbar.LENGTH_SHORT).show();
                                }
                                else functions.no_internet_dialog(AnnualReportActivity.this, false);
                            } catch (Exception e) {
                                Log.e("file_error", "The file error is : " + e);
                            }
                        }

                        @Override
                        public void onPermissionRationaleShouldBeShown(List<PermissionRequest> list, PermissionToken permissionToken) {
                            permissionToken.continuePermissionRequest();
                        }
                    }).check();
        });


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

